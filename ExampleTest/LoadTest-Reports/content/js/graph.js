/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 271.0, "minX": 0.0, "maxY": 1191202.0, "series": [{"data": [[0.0, 271.0], [0.1, 288.0], [0.2, 292.0], [0.3, 296.0], [0.4, 298.0], [0.5, 300.0], [0.6, 302.0], [0.7, 303.0], [0.8, 305.0], [0.9, 307.0], [1.0, 309.0], [1.1, 311.0], [1.2, 313.0], [1.3, 314.0], [1.4, 316.0], [1.5, 318.0], [1.6, 319.0], [1.7, 321.0], [1.8, 323.0], [1.9, 325.0], [2.0, 327.0], [2.1, 329.0], [2.2, 331.0], [2.3, 333.0], [2.4, 335.0], [2.5, 337.0], [2.6, 339.0], [2.7, 341.0], [2.8, 343.0], [2.9, 345.0], [3.0, 347.0], [3.1, 349.0], [3.2, 351.0], [3.3, 352.0], [3.4, 354.0], [3.5, 356.0], [3.6, 358.0], [3.7, 360.0], [3.8, 363.0], [3.9, 365.0], [4.0, 368.0], [4.1, 370.0], [4.2, 372.0], [4.3, 374.0], [4.4, 377.0], [4.5, 379.0], [4.6, 382.0], [4.7, 384.0], [4.8, 386.0], [4.9, 389.0], [5.0, 391.0], [5.1, 394.0], [5.2, 396.0], [5.3, 399.0], [5.4, 401.0], [5.5, 403.0], [5.6, 406.0], [5.7, 408.0], [5.8, 410.0], [5.9, 413.0], [6.0, 415.0], [6.1, 418.0], [6.2, 421.0], [6.3, 424.0], [6.4, 427.0], [6.5, 429.0], [6.6, 432.0], [6.7, 434.0], [6.8, 437.0], [6.9, 439.0], [7.0, 441.0], [7.1, 444.0], [7.2, 446.0], [7.3, 448.0], [7.4, 451.0], [7.5, 453.0], [7.6, 456.0], [7.7, 458.0], [7.8, 460.0], [7.9, 463.0], [8.0, 465.0], [8.1, 467.0], [8.2, 470.0], [8.3, 472.0], [8.4, 474.0], [8.5, 477.0], [8.6, 479.0], [8.7, 481.0], [8.8, 483.0], [8.9, 486.0], [9.0, 488.0], [9.1, 490.0], [9.2, 492.0], [9.3, 494.0], [9.4, 497.0], [9.5, 499.0], [9.6, 501.0], [9.7, 503.0], [9.8, 505.0], [9.9, 507.0], [10.0, 509.0], [10.1, 510.0], [10.2, 512.0], [10.3, 515.0], [10.4, 517.0], [10.5, 519.0], [10.6, 521.0], [10.7, 524.0], [10.8, 526.0], [10.9, 528.0], [11.0, 530.0], [11.1, 532.0], [11.2, 534.0], [11.3, 537.0], [11.4, 539.0], [11.5, 541.0], [11.6, 543.0], [11.7, 545.0], [11.8, 547.0], [11.9, 549.0], [12.0, 551.0], [12.1, 553.0], [12.2, 555.0], [12.3, 557.0], [12.4, 559.0], [12.5, 561.0], [12.6, 563.0], [12.7, 565.0], [12.8, 567.0], [12.9, 569.0], [13.0, 571.0], [13.1, 573.0], [13.2, 574.0], [13.3, 576.0], [13.4, 578.0], [13.5, 580.0], [13.6, 582.0], [13.7, 583.0], [13.8, 585.0], [13.9, 587.0], [14.0, 589.0], [14.1, 591.0], [14.2, 593.0], [14.3, 595.0], [14.4, 596.0], [14.5, 598.0], [14.6, 600.0], [14.7, 601.0], [14.8, 603.0], [14.9, 604.0], [15.0, 606.0], [15.1, 608.0], [15.2, 609.0], [15.3, 611.0], [15.4, 612.0], [15.5, 614.0], [15.6, 616.0], [15.7, 617.0], [15.8, 619.0], [15.9, 620.0], [16.0, 622.0], [16.1, 623.0], [16.2, 625.0], [16.3, 626.0], [16.4, 628.0], [16.5, 629.0], [16.6, 631.0], [16.7, 632.0], [16.8, 633.0], [16.9, 635.0], [17.0, 637.0], [17.1, 638.0], [17.2, 640.0], [17.3, 641.0], [17.4, 642.0], [17.5, 644.0], [17.6, 646.0], [17.7, 647.0], [17.8, 648.0], [17.9, 649.0], [18.0, 650.0], [18.1, 652.0], [18.2, 653.0], [18.3, 654.0], [18.4, 655.0], [18.5, 656.0], [18.6, 657.0], [18.7, 659.0], [18.8, 660.0], [18.9, 662.0], [19.0, 663.0], [19.1, 665.0], [19.2, 666.0], [19.3, 667.0], [19.4, 668.0], [19.5, 670.0], [19.6, 671.0], [19.7, 672.0], [19.8, 673.0], [19.9, 675.0], [20.0, 676.0], [20.1, 677.0], [20.2, 678.0], [20.3, 679.0], [20.4, 680.0], [20.5, 682.0], [20.6, 683.0], [20.7, 684.0], [20.8, 685.0], [20.9, 686.0], [21.0, 688.0], [21.1, 689.0], [21.2, 690.0], [21.3, 691.0], [21.4, 693.0], [21.5, 694.0], [21.6, 695.0], [21.7, 696.0], [21.8, 697.0], [21.9, 699.0], [22.0, 700.0], [22.1, 701.0], [22.2, 702.0], [22.3, 703.0], [22.4, 704.0], [22.5, 705.0], [22.6, 707.0], [22.7, 708.0], [22.8, 709.0], [22.9, 710.0], [23.0, 711.0], [23.1, 712.0], [23.2, 713.0], [23.3, 714.0], [23.4, 715.0], [23.5, 716.0], [23.6, 717.0], [23.7, 718.0], [23.8, 719.0], [23.9, 720.0], [24.0, 721.0], [24.1, 722.0], [24.2, 723.0], [24.3, 724.0], [24.4, 725.0], [24.5, 726.0], [24.6, 727.0], [24.7, 728.0], [24.8, 729.0], [24.9, 730.0], [25.0, 731.0], [25.1, 732.0], [25.2, 733.0], [25.3, 734.0], [25.4, 735.0], [25.5, 736.0], [25.6, 738.0], [25.7, 738.0], [25.8, 740.0], [25.9, 741.0], [26.0, 742.0], [26.1, 743.0], [26.2, 744.0], [26.3, 745.0], [26.4, 746.0], [26.5, 747.0], [26.6, 748.0], [26.7, 750.0], [26.8, 751.0], [26.9, 752.0], [27.0, 753.0], [27.1, 754.0], [27.2, 755.0], [27.3, 756.0], [27.4, 757.0], [27.5, 758.0], [27.6, 759.0], [27.7, 760.0], [27.8, 761.0], [27.9, 762.0], [28.0, 762.0], [28.1, 763.0], [28.2, 764.0], [28.3, 765.0], [28.4, 766.0], [28.5, 767.0], [28.6, 768.0], [28.7, 769.0], [28.8, 770.0], [28.9, 771.0], [29.0, 772.0], [29.1, 773.0], [29.2, 774.0], [29.3, 775.0], [29.4, 776.0], [29.5, 777.0], [29.6, 778.0], [29.7, 778.0], [29.8, 780.0], [29.9, 780.0], [30.0, 781.0], [30.1, 782.0], [30.2, 783.0], [30.3, 784.0], [30.4, 785.0], [30.5, 786.0], [30.6, 787.0], [30.7, 788.0], [30.8, 789.0], [30.9, 790.0], [31.0, 791.0], [31.1, 792.0], [31.2, 793.0], [31.3, 794.0], [31.4, 795.0], [31.5, 796.0], [31.6, 797.0], [31.7, 798.0], [31.8, 799.0], [31.9, 800.0], [32.0, 801.0], [32.1, 802.0], [32.2, 803.0], [32.3, 804.0], [32.4, 805.0], [32.5, 806.0], [32.6, 807.0], [32.7, 808.0], [32.8, 810.0], [32.9, 811.0], [33.0, 812.0], [33.1, 813.0], [33.2, 814.0], [33.3, 815.0], [33.4, 815.0], [33.5, 816.0], [33.6, 817.0], [33.7, 819.0], [33.8, 820.0], [33.9, 821.0], [34.0, 822.0], [34.1, 823.0], [34.2, 824.0], [34.3, 825.0], [34.4, 826.0], [34.5, 827.0], [34.6, 828.0], [34.7, 829.0], [34.8, 830.0], [34.9, 831.0], [35.0, 832.0], [35.1, 833.0], [35.2, 834.0], [35.3, 835.0], [35.4, 836.0], [35.5, 837.0], [35.6, 838.0], [35.7, 839.0], [35.8, 840.0], [35.9, 841.0], [36.0, 842.0], [36.1, 843.0], [36.2, 845.0], [36.3, 846.0], [36.4, 847.0], [36.5, 848.0], [36.6, 849.0], [36.7, 850.0], [36.8, 851.0], [36.9, 852.0], [37.0, 853.0], [37.1, 854.0], [37.2, 855.0], [37.3, 857.0], [37.4, 858.0], [37.5, 859.0], [37.6, 860.0], [37.7, 861.0], [37.8, 862.0], [37.9, 863.0], [38.0, 864.0], [38.1, 866.0], [38.2, 867.0], [38.3, 868.0], [38.4, 869.0], [38.5, 870.0], [38.6, 871.0], [38.7, 872.0], [38.8, 873.0], [38.9, 875.0], [39.0, 876.0], [39.1, 877.0], [39.2, 878.0], [39.3, 879.0], [39.4, 881.0], [39.5, 882.0], [39.6, 883.0], [39.7, 884.0], [39.8, 885.0], [39.9, 886.0], [40.0, 887.0], [40.1, 888.0], [40.2, 889.0], [40.3, 891.0], [40.4, 892.0], [40.5, 893.0], [40.6, 894.0], [40.7, 896.0], [40.8, 897.0], [40.9, 898.0], [41.0, 900.0], [41.1, 901.0], [41.2, 902.0], [41.3, 903.0], [41.4, 904.0], [41.5, 905.0], [41.6, 907.0], [41.7, 908.0], [41.8, 909.0], [41.9, 910.0], [42.0, 911.0], [42.1, 912.0], [42.2, 914.0], [42.3, 915.0], [42.4, 916.0], [42.5, 917.0], [42.6, 919.0], [42.7, 920.0], [42.8, 921.0], [42.9, 922.0], [43.0, 923.0], [43.1, 925.0], [43.2, 926.0], [43.3, 927.0], [43.4, 928.0], [43.5, 930.0], [43.6, 931.0], [43.7, 932.0], [43.8, 933.0], [43.9, 935.0], [44.0, 936.0], [44.1, 938.0], [44.2, 939.0], [44.3, 941.0], [44.4, 942.0], [44.5, 943.0], [44.6, 945.0], [44.7, 946.0], [44.8, 948.0], [44.9, 949.0], [45.0, 951.0], [45.1, 952.0], [45.2, 953.0], [45.3, 954.0], [45.4, 956.0], [45.5, 957.0], [45.6, 959.0], [45.7, 960.0], [45.8, 961.0], [45.9, 963.0], [46.0, 964.0], [46.1, 965.0], [46.2, 967.0], [46.3, 968.0], [46.4, 969.0], [46.5, 971.0], [46.6, 972.0], [46.7, 974.0], [46.8, 975.0], [46.9, 976.0], [47.0, 978.0], [47.1, 979.0], [47.2, 981.0], [47.3, 982.0], [47.4, 983.0], [47.5, 985.0], [47.6, 986.0], [47.7, 988.0], [47.8, 989.0], [47.9, 991.0], [48.0, 992.0], [48.1, 994.0], [48.2, 995.0], [48.3, 997.0], [48.4, 998.0], [48.5, 999.0], [48.6, 1001.0], [48.7, 1002.0], [48.8, 1004.0], [48.9, 1006.0], [49.0, 1007.0], [49.1, 1009.0], [49.2, 1010.0], [49.3, 1012.0], [49.4, 1014.0], [49.5, 1015.0], [49.6, 1016.0], [49.7, 1018.0], [49.8, 1019.0], [49.9, 1021.0], [50.0, 1023.0], [50.1, 1024.0], [50.2, 1026.0], [50.3, 1028.0], [50.4, 1030.0], [50.5, 1031.0], [50.6, 1033.0], [50.7, 1035.0], [50.8, 1037.0], [50.9, 1038.0], [51.0, 1040.0], [51.1, 1042.0], [51.2, 1044.0], [51.3, 1045.0], [51.4, 1047.0], [51.5, 1048.0], [51.6, 1050.0], [51.7, 1052.0], [51.8, 1053.0], [51.9, 1055.0], [52.0, 1056.0], [52.1, 1058.0], [52.2, 1059.0], [52.3, 1061.0], [52.4, 1062.0], [52.5, 1064.0], [52.6, 1066.0], [52.7, 1068.0], [52.8, 1069.0], [52.9, 1071.0], [53.0, 1073.0], [53.1, 1074.0], [53.2, 1076.0], [53.3, 1079.0], [53.4, 1080.0], [53.5, 1082.0], [53.6, 1084.0], [53.7, 1087.0], [53.8, 1089.0], [53.9, 1091.0], [54.0, 1092.0], [54.1, 1094.0], [54.2, 1096.0], [54.3, 1098.0], [54.4, 1099.0], [54.5, 1101.0], [54.6, 1103.0], [54.7, 1105.0], [54.8, 1108.0], [54.9, 1110.0], [55.0, 1112.0], [55.1, 1114.0], [55.2, 1116.0], [55.3, 1118.0], [55.4, 1120.0], [55.5, 1123.0], [55.6, 1124.0], [55.7, 1127.0], [55.8, 1129.0], [55.9, 1131.0], [56.0, 1133.0], [56.1, 1135.0], [56.2, 1138.0], [56.3, 1140.0], [56.4, 1142.0], [56.5, 1144.0], [56.6, 1147.0], [56.7, 1149.0], [56.8, 1151.0], [56.9, 1153.0], [57.0, 1156.0], [57.1, 1158.0], [57.2, 1160.0], [57.3, 1163.0], [57.4, 1165.0], [57.5, 1168.0], [57.6, 1171.0], [57.7, 1174.0], [57.8, 1176.0], [57.9, 1178.0], [58.0, 1181.0], [58.1, 1183.0], [58.2, 1186.0], [58.3, 1188.0], [58.4, 1190.0], [58.5, 1192.0], [58.6, 1195.0], [58.7, 1197.0], [58.8, 1200.0], [58.9, 1202.0], [59.0, 1205.0], [59.1, 1207.0], [59.2, 1210.0], [59.3, 1212.0], [59.4, 1215.0], [59.5, 1217.0], [59.6, 1220.0], [59.7, 1223.0], [59.8, 1225.0], [59.9, 1229.0], [60.0, 1231.0], [60.1, 1234.0], [60.2, 1236.0], [60.3, 1238.0], [60.4, 1241.0], [60.5, 1244.0], [60.6, 1247.0], [60.7, 1249.0], [60.8, 1252.0], [60.9, 1255.0], [61.0, 1258.0], [61.1, 1260.0], [61.2, 1263.0], [61.3, 1267.0], [61.4, 1270.0], [61.5, 1273.0], [61.6, 1277.0], [61.7, 1281.0], [61.8, 1284.0], [61.9, 1287.0], [62.0, 1291.0], [62.1, 1295.0], [62.2, 1298.0], [62.3, 1301.0], [62.4, 1304.0], [62.5, 1308.0], [62.6, 1311.0], [62.7, 1315.0], [62.8, 1317.0], [62.9, 1321.0], [63.0, 1324.0], [63.1, 1328.0], [63.2, 1331.0], [63.3, 1335.0], [63.4, 1339.0], [63.5, 1342.0], [63.6, 1346.0], [63.7, 1349.0], [63.8, 1353.0], [63.9, 1357.0], [64.0, 1361.0], [64.1, 1365.0], [64.2, 1370.0], [64.3, 1375.0], [64.4, 1380.0], [64.5, 1384.0], [64.6, 1388.0], [64.7, 1391.0], [64.8, 1396.0], [64.9, 1401.0], [65.0, 1405.0], [65.1, 1409.0], [65.2, 1414.0], [65.3, 1418.0], [65.4, 1423.0], [65.5, 1429.0], [65.6, 1435.0], [65.7, 1439.0], [65.8, 1445.0], [65.9, 1449.0], [66.0, 1454.0], [66.1, 1459.0], [66.2, 1465.0], [66.3, 1469.0], [66.4, 1474.0], [66.5, 1479.0], [66.6, 1484.0], [66.7, 1489.0], [66.8, 1494.0], [66.9, 1499.0], [67.0, 1505.0], [67.1, 1510.0], [67.2, 1516.0], [67.3, 1523.0], [67.4, 1529.0], [67.5, 1535.0], [67.6, 1541.0], [67.7, 1547.0], [67.8, 1553.0], [67.9, 1558.0], [68.0, 1564.0], [68.1, 1570.0], [68.2, 1575.0], [68.3, 1581.0], [68.4, 1587.0], [68.5, 1593.0], [68.6, 1598.0], [68.7, 1605.0], [68.8, 1611.0], [68.9, 1618.0], [69.0, 1625.0], [69.1, 1632.0], [69.2, 1640.0], [69.3, 1647.0], [69.4, 1652.0], [69.5, 1660.0], [69.6, 1667.0], [69.7, 1674.0], [69.8, 1681.0], [69.9, 1687.0], [70.0, 1695.0], [70.1, 1703.0], [70.2, 1709.0], [70.3, 1716.0], [70.4, 1724.0], [70.5, 1731.0], [70.6, 1737.0], [70.7, 1743.0], [70.8, 1751.0], [70.9, 1757.0], [71.0, 1763.0], [71.1, 1769.0], [71.2, 1776.0], [71.3, 1783.0], [71.4, 1789.0], [71.5, 1796.0], [71.6, 1801.0], [71.7, 1809.0], [71.8, 1815.0], [71.9, 1823.0], [72.0, 1828.0], [72.1, 1834.0], [72.2, 1841.0], [72.3, 1848.0], [72.4, 1855.0], [72.5, 1862.0], [72.6, 1870.0], [72.7, 1876.0], [72.8, 1883.0], [72.9, 1891.0], [73.0, 1897.0], [73.1, 1904.0], [73.2, 1912.0], [73.3, 1921.0], [73.4, 1930.0], [73.5, 1937.0], [73.6, 1943.0], [73.7, 1951.0], [73.8, 1959.0], [73.9, 1966.0], [74.0, 1974.0], [74.1, 1981.0], [74.2, 1988.0], [74.3, 1996.0], [74.4, 2005.0], [74.5, 2011.0], [74.6, 2017.0], [74.7, 2025.0], [74.8, 2032.0], [74.9, 2040.0], [75.0, 2049.0], [75.1, 2055.0], [75.2, 2062.0], [75.3, 2070.0], [75.4, 2078.0], [75.5, 2087.0], [75.6, 2096.0], [75.7, 2105.0], [75.8, 2112.0], [75.9, 2121.0], [76.0, 2128.0], [76.1, 2136.0], [76.2, 2146.0], [76.3, 2154.0], [76.4, 2163.0], [76.5, 2172.0], [76.6, 2181.0], [76.7, 2188.0], [76.8, 2195.0], [76.9, 2202.0], [77.0, 2214.0], [77.1, 2222.0], [77.2, 2230.0], [77.3, 2238.0], [77.4, 2248.0], [77.5, 2257.0], [77.6, 2270.0], [77.7, 2279.0], [77.8, 2287.0], [77.9, 2296.0], [78.0, 2305.0], [78.1, 2316.0], [78.2, 2326.0], [78.3, 2335.0], [78.4, 2346.0], [78.5, 2357.0], [78.6, 2367.0], [78.7, 2377.0], [78.8, 2387.0], [78.9, 2397.0], [79.0, 2406.0], [79.1, 2418.0], [79.2, 2428.0], [79.3, 2443.0], [79.4, 2454.0], [79.5, 2464.0], [79.6, 2474.0], [79.7, 2486.0], [79.8, 2496.0], [79.9, 2505.0], [80.0, 2515.0], [80.1, 2530.0], [80.2, 2543.0], [80.3, 2556.0], [80.4, 2567.0], [80.5, 2584.0], [80.6, 2598.0], [80.7, 2616.0], [80.8, 2631.0], [80.9, 2648.0], [81.0, 2667.0], [81.1, 2685.0], [81.2, 2706.0], [81.3, 2721.0], [81.4, 2745.0], [81.5, 2764.0], [81.6, 2785.0], [81.7, 2804.0], [81.8, 2827.0], [81.9, 2850.0], [82.0, 2873.0], [82.1, 2897.0], [82.2, 2920.0], [82.3, 2945.0], [82.4, 2975.0], [82.5, 3003.0], [82.6, 3034.0], [82.7, 3061.0], [82.8, 3096.0], [82.9, 3131.0], [83.0, 3161.0], [83.1, 3193.0], [83.2, 3225.0], [83.3, 3268.0], [83.4, 3306.0], [83.5, 3351.0], [83.6, 3391.0], [83.7, 3425.0], [83.8, 3470.0], [83.9, 3509.0], [84.0, 3550.0], [84.1, 3593.0], [84.2, 3637.0], [84.3, 3675.0], [84.4, 3715.0], [84.5, 3765.0], [84.6, 3804.0], [84.7, 3844.0], [84.8, 3892.0], [84.9, 3952.0], [85.0, 4002.0], [85.1, 4051.0], [85.2, 4090.0], [85.3, 4137.0], [85.4, 4188.0], [85.5, 4243.0], [85.6, 4290.0], [85.7, 4324.0], [85.8, 4375.0], [85.9, 4422.0], [86.0, 4487.0], [86.1, 4522.0], [86.2, 4585.0], [86.3, 4650.0], [86.4, 4701.0], [86.5, 4759.0], [86.6, 4813.0], [86.7, 4882.0], [86.8, 4961.0], [86.9, 5034.0], [87.0, 5114.0], [87.1, 5193.0], [87.2, 5254.0], [87.3, 5336.0], [87.4, 5392.0], [87.5, 5465.0], [87.6, 5537.0], [87.7, 5609.0], [87.8, 5677.0], [87.9, 5742.0], [88.0, 5798.0], [88.1, 5855.0], [88.2, 5927.0], [88.3, 5995.0], [88.4, 6055.0], [88.5, 6110.0], [88.6, 6194.0], [88.7, 6259.0], [88.8, 6322.0], [88.9, 6379.0], [89.0, 6457.0], [89.1, 6524.0], [89.2, 6580.0], [89.3, 6650.0], [89.4, 6708.0], [89.5, 6767.0], [89.6, 6828.0], [89.7, 6898.0], [89.8, 6970.0], [89.9, 7037.0], [90.0, 7104.0], [90.1, 7179.0], [90.2, 7232.0], [90.3, 7300.0], [90.4, 7372.0], [90.5, 7429.0], [90.6, 7504.0], [90.7, 7570.0], [90.8, 7656.0], [90.9, 7761.0], [91.0, 7869.0], [91.1, 7959.0], [91.2, 8062.0], [91.3, 8167.0], [91.4, 8261.0], [91.5, 8343.0], [91.6, 8447.0], [91.7, 8548.0], [91.8, 8666.0], [91.9, 8791.0], [92.0, 8959.0], [92.1, 9136.0], [92.2, 9287.0], [92.3, 9453.0], [92.4, 9646.0], [92.5, 9809.0], [92.6, 10034.0], [92.7, 10208.0], [92.8, 10463.0], [92.9, 10632.0], [93.0, 10773.0], [93.1, 10863.0], [93.2, 10920.0], [93.3, 10977.0], [93.4, 11019.0], [93.5, 11052.0], [93.6, 11080.0], [93.7, 11111.0], [93.8, 11141.0], [93.9, 11164.0], [94.0, 11185.0], [94.1, 11207.0], [94.2, 11228.0], [94.3, 11249.0], [94.4, 11270.0], [94.5, 11286.0], [94.6, 11303.0], [94.7, 11320.0], [94.8, 11335.0], [94.9, 11351.0], [95.0, 11370.0], [95.1, 11392.0], [95.2, 11411.0], [95.3, 11435.0], [95.4, 11455.0], [95.5, 11480.0], [95.6, 11506.0], [95.7, 11531.0], [95.8, 11558.0], [95.9, 11586.0], [96.0, 11627.0], [96.1, 11673.0], [96.2, 11725.0], [96.3, 11788.0], [96.4, 11861.0], [96.5, 11936.0], [96.6, 12021.0], [96.7, 12119.0], [96.8, 12230.0], [96.9, 12354.0], [97.0, 12520.0], [97.1, 12702.0], [97.2, 12835.0], [97.3, 13048.0], [97.4, 13254.0], [97.5, 13513.0], [97.6, 13767.0], [97.7, 14047.0], [97.8, 14319.0], [97.9, 14581.0], [98.0, 15012.0], [98.1, 15479.0], [98.2, 15841.0], [98.3, 16389.0], [98.4, 16984.0], [98.5, 17558.0], [98.6, 18016.0], [98.7, 18321.0], [98.8, 18852.0], [98.9, 19819.0], [99.0, 20673.0], [99.1, 21901.0], [99.2, 23201.0], [99.3, 23462.0], [99.4, 23606.0], [99.5, 23773.0], [99.6, 23971.0], [99.7, 24808.0], [99.8, 26923.0], [99.9, 39138.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 5567.0, "series": [{"data": [[1191200.0, 1.0], [37700.0, 1.0], [45700.0, 1.0], [47300.0, 2.0], [48100.0, 1.0], [47700.0, 4.0], [539300.0, 1.0], [200.0, 258.0], [54900.0, 1.0], [300.0, 2760.0], [400.0, 2375.0], [500.0, 2853.0], [600.0, 4177.0], [700.0, 5567.0], [800.0, 5179.0], [900.0, 4254.0], [1000.0, 3333.0], [1100.0, 2478.0], [1200.0, 1965.0], [1300.0, 1468.0], [1400.0, 1154.0], [1500.0, 963.0], [1600.0, 819.0], [1700.0, 848.0], [1800.0, 838.0], [1900.0, 736.0], [2000.0, 732.0], [2100.0, 687.0], [2200.0, 613.0], [2300.0, 554.0], [2400.0, 519.0], [2500.0, 436.0], [2600.0, 317.0], [2800.0, 250.0], [2700.0, 287.0], [2900.0, 208.0], [3000.0, 181.0], [3100.0, 177.0], [3300.0, 146.0], [3200.0, 141.0], [3400.0, 137.0], [3500.0, 134.0], [3600.0, 144.0], [3700.0, 131.0], [3800.0, 120.0], [3900.0, 105.0], [4000.0, 122.0], [4200.0, 112.0], [4300.0, 133.0], [4100.0, 118.0], [4600.0, 92.0], [4400.0, 99.0], [4500.0, 115.0], [4800.0, 91.0], [4700.0, 99.0], [5100.0, 69.0], [5000.0, 79.0], [4900.0, 64.0], [5300.0, 80.0], [5200.0, 90.0], [5500.0, 76.0], [5600.0, 89.0], [5400.0, 79.0], [5700.0, 92.0], [5800.0, 86.0], [6100.0, 77.0], [6000.0, 94.0], [5900.0, 89.0], [6300.0, 103.0], [6200.0, 79.0], [397800.0, 1.0], [6500.0, 88.0], [6600.0, 100.0], [6400.0, 71.0], [6800.0, 83.0], [6900.0, 74.0], [6700.0, 93.0], [7100.0, 79.0], [7000.0, 87.0], [7200.0, 96.0], [7400.0, 84.0], [7300.0, 83.0], [7600.0, 58.0], [7500.0, 81.0], [7900.0, 60.0], [7800.0, 52.0], [7700.0, 54.0], [8000.0, 57.0], [8100.0, 57.0], [8400.0, 55.0], [8600.0, 57.0], [8700.0, 39.0], [8200.0, 66.0], [8300.0, 54.0], [8500.0, 50.0], [8800.0, 37.0], [9000.0, 32.0], [9200.0, 40.0], [9100.0, 35.0], [8900.0, 28.0], [9600.0, 37.0], [9300.0, 38.0], [9500.0, 25.0], [9400.0, 31.0], [9700.0, 30.0], [10000.0, 35.0], [9900.0, 27.0], [10100.0, 29.0], [9800.0, 22.0], [10200.0, 26.0], [10300.0, 15.0], [10400.0, 33.0], [10700.0, 39.0], [10500.0, 31.0], [10600.0, 41.0], [11200.0, 283.0], [10800.0, 81.0], [11100.0, 230.0], [11000.0, 176.0], [10900.0, 105.0], [11300.0, 329.0], [11400.0, 241.0], [11500.0, 202.0], [11600.0, 127.0], [11700.0, 93.0], [11900.0, 72.0], [12000.0, 55.0], [12200.0, 50.0], [12100.0, 51.0], [11800.0, 75.0], [12700.0, 44.0], [12500.0, 42.0], [12600.0, 25.0], [12300.0, 31.0], [12400.0, 37.0], [13200.0, 27.0], [13000.0, 23.0], [12800.0, 28.0], [13100.0, 30.0], [13300.0, 21.0], [12900.0, 29.0], [13400.0, 22.0], [13800.0, 14.0], [13600.0, 31.0], [13700.0, 19.0], [13500.0, 19.0], [14300.0, 25.0], [14200.0, 23.0], [13900.0, 22.0], [14000.0, 18.0], [14100.0, 22.0], [14700.0, 10.0], [14400.0, 17.0], [14600.0, 12.0], [14800.0, 13.0], [14500.0, 21.0], [14900.0, 18.0], [15200.0, 12.0], [15100.0, 13.0], [15300.0, 12.0], [15000.0, 14.0], [15400.0, 12.0], [15700.0, 19.0], [15500.0, 13.0], [15600.0, 16.0], [15800.0, 6.0], [16100.0, 11.0], [16200.0, 8.0], [16300.0, 12.0], [16000.0, 11.0], [15900.0, 14.0], [17000.0, 10.0], [16400.0, 10.0], [16800.0, 8.0], [17400.0, 15.0], [16600.0, 8.0], [17200.0, 7.0], [18000.0, 21.0], [17600.0, 11.0], [18400.0, 10.0], [17800.0, 6.0], [18200.0, 12.0], [19400.0, 10.0], [19200.0, 3.0], [18800.0, 7.0], [19000.0, 6.0], [18600.0, 7.0], [19800.0, 8.0], [20400.0, 4.0], [19600.0, 7.0], [20000.0, 9.0], [20200.0, 5.0], [20800.0, 7.0], [21000.0, 5.0], [21200.0, 11.0], [21400.0, 2.0], [20600.0, 5.0], [21800.0, 4.0], [22400.0, 3.0], [22200.0, 4.0], [21600.0, 5.0], [22800.0, 5.0], [23400.0, 26.0], [23000.0, 2.0], [23200.0, 10.0], [22600.0, 3.0], [24000.0, 16.0], [23600.0, 37.0], [23800.0, 33.0], [24200.0, 10.0], [24400.0, 4.0], [24800.0, 5.0], [25200.0, 3.0], [25400.0, 5.0], [25000.0, 5.0], [24600.0, 2.0], [26200.0, 1.0], [25600.0, 2.0], [26400.0, 2.0], [25800.0, 4.0], [26600.0, 2.0], [26000.0, 1.0], [27600.0, 1.0], [27000.0, 1.0], [26800.0, 2.0], [27200.0, 1.0], [27400.0, 1.0], [28000.0, 1.0], [28200.0, 1.0], [28600.0, 1.0], [28400.0, 2.0], [29200.0, 1.0], [30400.0, 1.0], [30600.0, 1.0], [31000.0, 2.0], [31800.0, 2.0], [32200.0, 2.0], [32600.0, 1.0], [32800.0, 2.0], [33200.0, 1.0], [36400.0, 1.0], [42800.0, 1.0], [48400.0, 2.0], [48800.0, 1.0], [47600.0, 5.0], [47200.0, 1.0], [48000.0, 1.0], [49600.0, 1.0], [509700.0, 1.0], [34300.0, 1.0], [35100.0, 1.0], [37100.0, 1.0], [39100.0, 1.0], [43500.0, 1.0], [47100.0, 1.0], [47500.0, 6.0], [47900.0, 4.0], [253900.0, 1.0], [16500.0, 11.0], [16900.0, 10.0], [17300.0, 4.0], [17100.0, 15.0], [16700.0, 11.0], [18300.0, 17.0], [17700.0, 11.0], [18100.0, 23.0], [17900.0, 22.0], [17500.0, 6.0], [18500.0, 12.0], [18900.0, 5.0], [19100.0, 8.0], [18700.0, 8.0], [19300.0, 6.0], [19700.0, 5.0], [19500.0, 4.0], [20300.0, 7.0], [19900.0, 8.0], [20100.0, 6.0], [21300.0, 8.0], [21500.0, 4.0], [20700.0, 3.0], [20500.0, 6.0], [21100.0, 2.0], [20900.0, 3.0], [21900.0, 9.0], [22500.0, 5.0], [22300.0, 4.0], [21700.0, 2.0], [22100.0, 3.0], [23100.0, 12.0], [22900.0, 3.0], [23300.0, 31.0], [23500.0, 43.0], [22700.0, 3.0], [24500.0, 5.0], [24100.0, 10.0], [23700.0, 30.0], [23900.0, 18.0], [24300.0, 3.0], [25100.0, 2.0], [25500.0, 2.0], [25300.0, 4.0], [24700.0, 5.0], [24900.0, 2.0], [26100.0, 2.0], [26300.0, 2.0], [25700.0, 4.0], [26500.0, 3.0], [26900.0, 4.0], [26700.0, 2.0], [27500.0, 1.0], [28500.0, 1.0], [28100.0, 1.0], [27700.0, 1.0], [28700.0, 1.0], [29100.0, 3.0], [28900.0, 1.0], [30300.0, 3.0], [29900.0, 1.0], [30700.0, 1.0], [30100.0, 2.0], [30500.0, 3.0], [31500.0, 1.0], [30900.0, 2.0], [32700.0, 1.0], [31900.0, 1.0], [32100.0, 1.0], [33400.0, 1.0], [35400.0, 1.0], [43800.0, 1.0], [47000.0, 1.0], [49000.0, 2.0], [48600.0, 2.0], [47800.0, 6.0], [47400.0, 1.0], [49800.0, 1.0], [51400.0, 1.0], [57000.0, 1.0], [637800.0, 1.0], [114000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1191200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2825.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 32418.0, "series": [{"data": [[0.0, 5410.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 32418.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 15872.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2825.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.042016806722684, "minX": 1.60318704E12, "maxY": 101.7638458130262, "series": [{"data": [[1.60318752E12, 50.0], [1.60318722E12, 25.0], [1.60318854E12, 101.0], [1.60318824E12, 101.7638458130262], [1.60318794E12, 75.0], [1.60318884E12, 101.0], [1.60318764E12, 50.0], [1.60318734E12, 25.0], [1.60318704E12, 8.042016806722684], [1.60318866E12, 101.0], [1.60318908E12, 10.0], [1.60318836E12, 101.0], [1.60318806E12, 75.0], [1.60318776E12, 59.87500000000003], [1.60318746E12, 50.27209595959597], [1.60318716E12, 25.0], [1.60318878E12, 101.0], [1.60318896E12, 101.0], [1.60318848E12, 101.0], [1.60318818E12, 98.36541970802921], [1.60318788E12, 75.0], [1.6031889E12, 101.0], [1.60318758E12, 50.0], [1.60318728E12, 25.0], [1.6031886E12, 101.0], [1.6031883E12, 101.0], [1.603188E12, 75.0], [1.6031877E12, 50.0], [1.6031874E12, 37.04114134041143], [1.6031871E12, 23.943155452436155], [1.60318872E12, 101.0], [1.60318902E12, 99.43322321849936], [1.60318842E12, 101.0], [1.60318812E12, 82.0369334079465], [1.60318782E12, 74.56009615384635]], "isOverall": false, "label": "Load Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318908E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 292.0, "minX": 3.0, "maxY": 397333.0, "series": [{"data": [[3.0, 366.0], [4.0, 349.0], [6.0, 447.75], [9.0, 397.5], [11.0, 391.0], [12.0, 717.1666666666667], [13.0, 477.3333333333333], [14.0, 292.0], [15.0, 310.6], [18.0, 661.6666666666666], [19.0, 127184.5], [20.0, 133019.66666666666], [21.0, 54774.799999999996], [22.0, 397333.0], [23.0, 212906.66666666666], [24.0, 42922.166666666664], [25.0, 395.5], [26.0, 9919.0], [27.0, 393.92307692307696], [28.0, 11141.0], [29.0, 879.2], [30.0, 451.45454545454544], [31.0, 318.0], [32.0, 8092.333333333333], [33.0, 465.2727272727273], [34.0, 11847.0], [35.0, 560.3333333333334], [36.0, 2856.285714285714], [37.0, 550.5], [38.0, 334.0], [39.0, 548.7142857142858], [40.0, 392.75], [41.0, 1589.5], [42.0, 1564.6111111111113], [43.0, 1309.4], [44.0, 3077.0], [45.0, 503.57894736842115], [46.0, 631.0], [47.0, 4482.833333333333], [48.0, 684.9285714285716], [49.0, 499.0], [50.0, 3742.5], [51.0, 2148.764705882353], [52.0, 6441.0], [53.0, 414.25], [54.0, 2006.7894736842106], [55.0, 999.5], [56.0, 2951.6], [57.0, 1603.7142857142858], [58.0, 1104.25], [59.0, 806.25], [60.0, 1061.7272727272727], [61.0, 502.0], [62.0, 461.0], [63.0, 1119.8000000000002], [64.0, 3131.5], [65.0, 664.5], [66.0, 855.1111111111111], [67.0, 10992.0], [68.0, 773.5], [69.0, 1130.3703703703704], [70.0, 398.5], [71.0, 447.0], [72.0, 1061.15], [73.0, 3426.75], [74.0, 1270.3333333333333], [75.0, 1233.2257157041204], [76.0, 305.5], [77.0, 2374.0], [78.0, 1973.3888888888891], [79.0, 1624.25], [80.0, 909.3333333333335], [81.0, 2153.0], [82.0, 2892.9375], [83.0, 305.5], [84.0, 1689.2222222222222], [85.0, 298.0], [86.0, 5324.5], [87.0, 3305.166666666667], [88.0, 3683.333333333333], [89.0, 3880.25], [90.0, 2244.0], [91.0, 5562.0], [92.0, 2670.823529411765], [93.0, 2981.7777777777774], [94.0, 1253.0555555555557], [95.0, 1747.3095238095236], [96.0, 1144.3529411764707], [97.0, 1690.764705882353], [98.0, 620.8999999999999], [99.0, 1806.0454545454538], [100.0, 1596.8928571428567], [101.0, 3364.75], [102.0, 1289.2857142857144], [104.0, 1176.9032258064515], [105.0, 1023.2264150943398], [106.0, 1300.1666666666665], [107.0, 1290.5], [108.0, 974.5999999999999], [109.0, 938.8275862068964], [110.0, 1766.0714285714284], [111.0, 937.344827586207], [112.0, 2133.2999999999997], [113.0, 1026.32], [114.0, 1043.8888888888891], [115.0, 1295.0434782608695], [116.0, 1031.3333333333335], [117.0, 1621.7777777777778], [118.0, 1537.8095238095236], [119.0, 4352.666666666666], [120.0, 774.7777777777778], [121.0, 650.5], [122.0, 1398.384615384615], [123.0, 1422.9], [124.0, 2063.0], [125.0, 1003.0], [126.0, 1795.3333333333333], [127.0, 2253.0], [128.0, 1721.2399999999998], [129.0, 1236.7083333333333], [130.0, 1288.9999999999998], [131.0, 2269.6], [132.0, 1571.5], [133.0, 1119.2142857142858], [134.0, 1467.037037037037], [135.0, 1119.344827586207], [136.0, 1706.1458333333335], [137.0, 1671.884615384615], [138.0, 1334.9310344827588], [139.0, 902.090909090909], [140.0, 1411.3999999999999], [141.0, 967.4545454545454], [142.0, 1151.1875], [143.0, 1317.0], [145.0, 5036.111111111111], [144.0, 1357.1818181818182], [146.0, 1490.0], [147.0, 987.972972972973], [149.0, 2172.952380952381], [148.0, 2645.0], [150.0, 2289.211118150135], [151.0, 1678.5637583892617], [152.0, 1527.2142857142858], [153.0, 2512.8953488372076], [154.0, 1086.157894736842], [155.0, 1769.5625000000002], [156.0, 1538.090909090909], [157.0, 2462.0], [158.0, 1499.3636363636363], [159.0, 1230.227272727273], [160.0, 947.2727272727273], [161.0, 2481.3809523809523], [162.0, 1902.8461538461538], [163.0, 1658.8297872340424], [164.0, 2207.857142857143], [165.0, 1891.8461538461543], [166.0, 1585.6896551724135], [167.0, 1339.6923076923078], [168.0, 2552.875], [169.0, 1369.2500000000002], [170.0, 1076.2571428571428], [171.0, 2218.4705882352946], [172.0, 1129.4062499999998], [173.0, 1618.0740740740735], [174.0, 1182.6666666666667], [175.0, 1159.7272727272725], [176.0, 953.4], [177.0, 931.3333333333334], [178.0, 1740.7692307692307], [179.0, 2508.260869565218], [180.0, 2048.5555555555557], [181.0, 2426.5], [182.0, 1299.7142857142853], [183.0, 4279.851851851851], [184.0, 4744.0], [185.0, 1085.1428571428573], [186.0, 3034.4814814814813], [187.0, 1717.230769230769], [188.0, 1739.1923076923072], [189.0, 1717.7441860465117], [190.0, 1996.46875], [191.0, 1692.7368421052631], [192.0, 1306.7391304347827], [193.0, 1285.8387096774193], [194.0, 1415.5357142857144], [195.0, 1630.0000000000007], [196.0, 2797.896551724137], [197.0, 1064.625], [198.0, 1851.1818181818182], [199.0, 3159.107142857143], [200.0, 1104.0], [201.0, 1008.25], [202.0, 2853.214285714286], [203.0, 2324.8088279153044], [204.0, 2401.034334763948], [205.0, 1608.2666666666664], [206.0, 2171.6944444444443], [207.0, 2548.6197183098607], [208.0, 2992.9327731092435], [209.0, 3667.129870129871], [210.0, 1799.7169811320757], [211.0, 3085.3417721518995], [212.0, 2228.942528735632], [213.0, 2393.539215686276], [214.0, 2346.561224489796], [215.0, 3859.287356321838], [216.0, 1803.63768115942], [217.0, 1938.5161290322585], [218.0, 1864.1388888888896], [219.0, 1422.5333333333335], [220.0, 1590.45], [221.0, 2634.450704225353], [222.0, 2981.247058823529], [223.0, 2898.893617021277], [224.0, 2438.428571428572], [225.0, 1682.945454545455], [226.0, 1435.7499999999998], [227.0, 2017.4112149532716], [228.0, 3237.684210526317], [229.0, 3199.121739130436], [230.0, 3436.9726027397255], [231.0, 2341.891472868216], [232.0, 2167.7744360902266], [233.0, 2694.1801801801803], [234.0, 2568.841463414633], [235.0, 2374.2015503875973], [236.0, 2200.2269938650306], [237.0, 2305.7920792079203], [238.0, 2280.0862068965516], [239.0, 2185.360824742269], [240.0, 2176.61904761905], [242.0, 1824.88], [241.0, 2201.0], [243.0, 2589.1176470588225], [244.0, 2816.788732394365], [245.0, 2057.867647058824], [246.0, 2139.6153846153848], [247.0, 1993.3235294117653], [248.0, 2779.3478260869556], [249.0, 2938.6530612244906], [250.0, 2877.9444444444443], [251.0, 3116.8070175438597], [252.0, 2444.1683168316836], [253.0, 2474.108108108108], [254.0, 2958.271604938271], [255.0, 2772.874866879657], [257.0, 2362.111111111111], [256.0, 2772.1410526315794], [258.0, 2706.104651162791], [259.0, 2981.3575757575754], [260.0, 2522.0928074245917], [261.0, 2655.9901960784337], [262.0, 2405.6043478260867], [263.0, 2397.5112781954886], [264.0, 2227.2333333333336], [270.0, 2793.5230769230775], [271.0, 3063.588235294118], [268.0, 2696.8386851605487], [269.0, 2540.7699724517884], [265.0, 2668.559999999999], [266.0, 2703.969696969697], [267.0, 2777.664804469274], [273.0, 2786.926339285713], [272.0, 3260.348484848483], [274.0, 3433.245033112583], [275.0, 3620.369426751593], [276.0, 2959.04054054054], [277.0, 2846.277333333333], [278.0, 2665.154798761609], [279.0, 3129.554179566565], [280.0, 2720.582554517133], [286.0, 2978.777472527473], [287.0, 2030.6954022988511], [284.0, 3005.1982248520712], [285.0, 2472.889880952381], [281.0, 2229.6746268656716], [282.0, 3111.113564668768], [283.0, 2691.837837837838], [289.0, 2755.6919431279607], [288.0, 3100.6708074534167], [290.0, 2233.844444444445], [291.0, 2988.1150159744398], [292.0, 3012.110977443612], [293.0, 2949.963235294116], [294.0, 2683.046296296298], [295.0, 2537.188073394494], [296.0, 2457.0788643533124], [302.0, 4587.294871794872], [303.0, 2862.375], [300.0, 2857.8815789473683], [301.0, 2499.5593220338988], [297.0, 2990.732258064517], [298.0, 2541.6078431372534], [299.0, 2206.3023255813955], [305.0, 3891.4782608695655], [304.0, 4019.594594594595], [306.0, 2887.733333333333], [307.0, 2769.3846153846152], [308.0, 3817.8611111111104], [309.0, 3074.6708860759486], [310.0, 2728.7922077922076], [311.0, 2804.4299065420555], [312.0, 2397.290909090909], [318.0, 4140.419354838709], [319.0, 5558.943262411349], [316.0, 2778.9107142857138], [317.0, 3767.3589743589746], [313.0, 5366.529411764705], [314.0, 3759.603174603175], [315.0, 1946.388059701492], [321.0, 4773.128378378378], [320.0, 5029.273684210526], [322.0, 2672.7894736842127], [323.0, 4087.714285714285], [324.0, 2836.869565217392], [325.0, 2357.315789473684], [326.0, 4045.6250000000005], [327.0, 7133.620689655174], [328.0, 5464.227272727274], [334.0, 6259.7380952380945], [332.0, 3308.9369072164895], [333.0, 6095.568627450982], [329.0, 4664.263888888888], [330.0, 3769.890909090909], [331.0, 4199.367346938778]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[227.91064130915515, 2591.3626890756386]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 334.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.60318704E12, "maxY": 118166.4, "series": [{"data": [[1.60318752E12, 62225.0], [1.60318722E12, 62408.13333333333], [1.60318854E12, 104059.4], [1.60318824E12, 118166.4], [1.60318794E12, 85449.01666666666], [1.60318884E12, 103563.41666666667], [1.60318764E12, 67101.96666666666], [1.60318734E12, 37713.86666666667], [1.60318704E12, 6402.2], [1.60318866E12, 97786.36666666667], [1.60318908E12, 887.3], [1.60318836E12, 94265.2], [1.60318806E12, 105459.86666666667], [1.60318776E12, 97283.61666666667], [1.60318746E12, 84879.2], [1.60318716E12, 96371.86666666667], [1.60318878E12, 105714.71666666666], [1.60318896E12, 105227.81666666667], [1.60318848E12, 93338.56666666667], [1.60318818E12, 116380.26666666666], [1.60318788E12, 80117.98333333334], [1.6031889E12, 114036.01666666666], [1.60318758E12, 41264.666666666664], [1.60318728E12, 40350.2], [1.6031886E12, 111928.9], [1.6031883E12, 116895.85], [1.603188E12, 96312.5], [1.6031877E12, 99648.25], [1.6031874E12, 80944.36666666667], [1.6031871E12, 92728.28333333334], [1.60318872E12, 102015.98333333334], [1.60318902E12, 111774.93333333333], [1.60318842E12, 76698.71666666666], [1.60318812E12, 95989.86666666667], [1.60318782E12, 87409.26666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60318752E12, 2134.9], [1.60318722E12, 2146.0], [1.60318854E12, 3305.95], [1.60318824E12, 3816.55], [1.60318794E12, 2762.05], [1.60318884E12, 3350.35], [1.60318764E12, 2301.4], [1.60318734E12, 1296.85], [1.60318704E12, 220.15], [1.60318866E12, 3191.25], [1.60318908E12, 0.0], [1.60318836E12, 2993.3], [1.60318806E12, 3552.0], [1.60318776E12, 3254.15], [1.60318746E12, 2897.1], [1.60318716E12, 3311.5], [1.60318878E12, 3379.95], [1.60318896E12, 3590.85], [1.60318848E12, 2958.15], [1.60318818E12, 3903.5], [1.60318788E12, 2639.95], [1.6031889E12, 3746.25], [1.60318758E12, 1418.95], [1.60318728E12, 1387.5], [1.6031886E12, 3592.7], [1.6031883E12, 3814.7], [1.603188E12, 3257.85], [1.6031877E12, 3396.6], [1.6031874E12, 2775.0], [1.6031871E12, 3189.4], [1.60318872E12, 3416.95], [1.60318902E12, 3688.9], [1.60318842E12, 2506.75], [1.60318812E12, 3291.15], [1.60318782E12, 2858.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318908E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 530.6134453781513, "minX": 1.60318704E12, "maxY": 200174.2105263158, "series": [{"data": [[1.60318752E12, 2628.2970639032765], [1.60318722E12, 1196.8543103448276], [1.60318854E12, 2979.719500000004], [1.60318824E12, 2619.2317235268015], [1.60318794E12, 2870.11865443425], [1.60318884E12, 2742.689777327934], [1.60318764E12, 2706.6124899919932], [1.60318734E12, 2042.0527817403697], [1.60318704E12, 530.6134453781513], [1.60318866E12, 3195.0511302475807], [1.60318908E12, 200174.2105263158], [1.60318836E12, 3265.98073747936], [1.60318806E12, 2225.3425832492453], [1.60318776E12, 1871.3941048034899], [1.60318746E12, 1743.4602272727295], [1.60318716E12, 820.2494419642867], [1.60318878E12, 2956.0758994578546], [1.60318896E12, 2914.774325012735], [1.60318848E12, 3228.693251533745], [1.60318818E12, 2621.074361313868], [1.60318788E12, 2884.2094861660034], [1.6031889E12, 2736.82640812557], [1.60318758E12, 3608.973924380706], [1.60318728E12, 2188.886666666667], [1.6031886E12, 2797.1693171187953], [1.6031883E12, 2634.3504043126673], [1.603188E12, 2444.278516057583], [1.6031877E12, 1638.0725806451633], [1.6031874E12, 1383.6569343065698], [1.6031871E12, 812.5092807424593], [1.60318872E12, 2897.5787278415], [1.60318902E12, 2667.519584709769], [1.60318842E12, 4223.091158327627], [1.60318812E12, 2730.456071628422], [1.60318782E12, 2661.981370192309]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60318704E12, "maxY": 3607.9869621903504, "series": [{"data": [[1.60318752E12, 2587.4689119171007], [1.60318722E12, 1196.0198275862058], [1.60318854E12, 1354.9300000000014], [1.60318824E12, 1434.2033673017268], [1.60318794E12, 1462.9474006116172], [1.60318884E12, 1495.5713562753035], [1.60318764E12, 2652.8230584467574], [1.60318734E12, 2041.1554921540662], [1.60318704E12, 529.8151260504201], [1.60318866E12, 2131.1141011840714], [1.60318908E12, 0.0], [1.60318836E12, 1571.3208585580612], [1.60318806E12, 1795.5792129162471], [1.60318776E12, 1361.4967248908313], [1.60318746E12, 1594.8611111111102], [1.60318716E12, 806.9804687500007], [1.60318878E12, 1518.8989650073925], [1.60318896E12, 2763.128884360679], [1.60318848E12, 1642.395984383713], [1.60318818E12, 2109.3134124087546], [1.60318788E12, 2056.6343873517785], [1.6031889E12, 1769.6514312096037], [1.60318758E12, 3607.9869621903504], [1.60318728E12, 2187.7906666666668], [1.6031886E12, 1377.5032740879326], [1.6031883E12, 1581.5260557053016], [1.603188E12, 2109.3272425249197], [1.6031877E12, 1480.4139784946233], [1.6031874E12, 1328.0557398805583], [1.6031871E12, 811.944895591647], [1.60318872E12, 2324.139207507822], [1.60318902E12, 1874.6913638508743], [1.60318842E12, 3190.732693625768], [1.60318812E12, 2667.950195858987], [1.60318782E12, 1601.5420673076908]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 73.35294117647062, "minX": 1.60318704E12, "maxY": 200172.05263157896, "series": [{"data": [[1.60318752E12, 256.5129533678758], [1.60318722E12, 120.78965517241396], [1.60318854E12, 2593.8334999999993], [1.60318824E12, 2076.4448382809055], [1.60318794E12, 2458.633639143736], [1.60318884E12, 2266.195850202426], [1.60318764E12, 395.7646116893515], [1.60318734E12, 84.91868758915828], [1.60318704E12, 73.35294117647062], [1.60318866E12, 1847.4472551130248], [1.60318908E12, 200172.05263157896], [1.60318836E12, 2745.610897083104], [1.60318806E12, 983.1700302724513], [1.60318776E12, 1422.5234716157217], [1.60318746E12, 542.8257575757573], [1.60318716E12, 329.6300223214283], [1.60318878E12, 2392.1310990635734], [1.60318896E12, 652.4691798267968], [1.60318848E12, 2537.6765197992177], [1.60318818E12, 1228.7454379562018], [1.60318788E12, 1616.743741765481], [1.6031889E12, 1697.828716528161], [1.60318758E12, 76.8943937418513], [1.60318728E12, 98.67333333333336], [1.6031886E12, 2379.139382600558], [1.6031883E12, 2037.2771787960453], [1.603188E12, 803.6533776301234], [1.6031877E12, 698.4096774193554], [1.6031874E12, 446.6934306569342], [1.6031871E12, 267.21171693735454], [1.60318872E12, 1272.9593326381664], [1.60318902E12, 1639.5238319962232], [1.60318842E12, 1980.39479095271], [1.60318812E12, 437.60436485730236], [1.60318782E12, 2025.6298076923078]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 271.0, "minX": 1.60318704E12, "maxY": 54906.0, "series": [{"data": [[1.60318752E12, 28776.0], [1.60318722E12, 11940.0], [1.60318854E12, 29152.0], [1.60318824E12, 11800.0], [1.60318794E12, 54906.0], [1.60318884E12, 14336.0], [1.60318764E12, 31905.0], [1.60318734E12, 17685.0], [1.60318704E12, 2803.0], [1.60318866E12, 20845.0], [1.60318836E12, 15442.0], [1.60318806E12, 32874.0], [1.60318776E12, 12203.0], [1.60318746E12, 26140.0], [1.60318716E12, 10338.0], [1.60318878E12, 30514.0], [1.60318896E12, 23194.0], [1.60318848E12, 20630.0], [1.60318818E12, 27602.0], [1.60318788E12, 26455.0], [1.6031889E12, 24580.0], [1.60318758E12, 34363.0], [1.60318728E12, 24827.0], [1.6031886E12, 11625.0], [1.6031883E12, 48646.0], [1.603188E12, 19609.0], [1.6031877E12, 14960.0], [1.6031874E12, 14293.0], [1.6031871E12, 8838.0], [1.60318872E12, 25794.0], [1.60318902E12, 18128.0], [1.60318842E12, 43837.0], [1.60318812E12, 25390.0], [1.60318782E12, 16469.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60318752E12, 294.39499972462653], [1.60318722E12, 296.8979994463921], [1.60318854E12, 467.55199744224547], [1.60318824E12, 538.1519990158081], [1.60318794E12, 576.3379989314079], [1.60318884E12, 443.00399438381197], [1.60318764E12, 292.0], [1.60318734E12, 283.0], [1.60318704E12, 276.1199995994568], [1.60318866E12, 394.0679991769791], [1.60318836E12, 551.8459899640084], [1.60318806E12, 324.0], [1.60318776E12, 433.6799991607666], [1.60318746E12, 300.10299962639806], [1.60318716E12, 343.4759982919693], [1.60318878E12, 541.9039991283416], [1.60318896E12, 357.0], [1.60318848E12, 564.0], [1.60318818E12, 312.0], [1.60318788E12, 314.5559989786148], [1.6031889E12, 478.4679990339279], [1.60318758E12, 288.91199981689454], [1.60318728E12, 288.0359992837906], [1.6031886E12, 607.9219972205162], [1.6031883E12, 488.133999016285], [1.603188E12, 386.4379953789711], [1.6031877E12, 370.19799737215044], [1.6031874E12, 291.5089996421337], [1.6031871E12, 312.5159995889664], [1.60318872E12, 502.0], [1.60318902E12, 461.8199980974197], [1.60318842E12, 333.6119990301132], [1.60318812E12, 298.0199995756149], [1.60318782E12, 575.9139996314049]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60318752E12, 295.4345001101494], [1.60318722E12, 298.0], [1.60318854E12, 476.50600085258486], [1.60318824E12, 544.7344007873535], [1.60318794E12, 582.7436008548736], [1.60318884E12, 459.5104013824463], [1.60318764E12, 292.32550011873246], [1.60318734E12, 283.0], [1.60318704E12, 277.6320001602173], [1.60318866E12, 399.34960065841676], [1.60318836E12, 575.1124006175995], [1.60318806E12, 328.03580036640165], [1.60318776E12, 442.2400016784668], [1.60318746E12, 301.51330014944074], [1.60318716E12, 349.1927005124092], [1.60318878E12, 548.4860008716583], [1.60318896E12, 360.4516003704071], [1.60318848E12, 576.6000022888184], [1.60318818E12, 313.0], [1.60318788E12, 315.1372001361847], [1.6031889E12, 481.0574001932144], [1.60318758E12, 289.0], [1.60318728E12, 289.0], [1.6031886E12, 614.4714003705978], [1.6031883E12, 491.84740039348605], [1.603188E12, 392.6628010082245], [1.6031877E12, 376.37260035037997], [1.6031874E12, 292.0], [1.6031871E12, 314.0676001644135], [1.60318872E12, 503.0], [1.60318902E12, 465.0], [1.60318842E12, 338.54640077590943], [1.60318812E12, 299.0], [1.60318782E12, 579.9162004423141]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60318752E12, 294.97249986231327], [1.60318722E12, 298.0], [1.60318854E12, 472.9159987211227], [1.60318824E12, 541.4319990158081], [1.60318794E12, 579.157998931408], [1.60318884E12, 453.7119982719421], [1.60318764E12, 292.0], [1.60318734E12, 283.0], [1.60318704E12, 276.9599997997284], [1.60318866E12, 396.58799917697905], [1.60318836E12, 567.5659976840019], [1.60318806E12, 324.9979990839958], [1.60318776E12, 436.8799991607666], [1.60318746E12, 300.88649981319907], [1.60318716E12, 347.04349935948846], [1.60318878E12, 544.8299989104271], [1.60318896E12, 358.3469993054867], [1.60318848E12, 566.999997138977], [1.60318818E12, 313.0], [1.60318788E12, 315.0], [1.6031889E12, 480.246999758482], [1.60318758E12, 289.0], [1.60318728E12, 289.0], [1.6031886E12, 612.3754993051291], [1.6031883E12, 490.1969995081425], [1.603188E12, 389.47799957990645], [1.6031877E12, 374.3544993430376], [1.6031874E12, 292.0], [1.6031871E12, 313.3779997944832], [1.60318872E12, 502.5559997797012], [1.60318902E12, 464.8574992865324], [1.60318842E12, 335.6459995150566], [1.60318812E12, 298.90999978780746], [1.60318782E12, 578.0609994471073]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60318752E12, 277.0], [1.60318722E12, 280.0], [1.60318854E12, 364.0], [1.60318824E12, 402.0], [1.60318794E12, 367.0], [1.60318884E12, 331.0], [1.60318764E12, 282.0], [1.60318734E12, 279.0], [1.60318704E12, 275.0], [1.60318866E12, 331.0], [1.60318836E12, 401.0], [1.60318806E12, 291.0], [1.60318776E12, 318.0], [1.60318746E12, 274.0], [1.60318716E12, 300.0], [1.60318878E12, 422.0], [1.60318896E12, 305.0], [1.60318848E12, 451.0], [1.60318818E12, 279.0], [1.60318788E12, 287.0], [1.6031889E12, 351.0], [1.60318758E12, 275.0], [1.60318728E12, 284.0], [1.6031886E12, 479.0], [1.6031883E12, 366.0], [1.603188E12, 330.0], [1.6031877E12, 310.0], [1.6031874E12, 271.0], [1.6031871E12, 293.0], [1.60318872E12, 412.0], [1.60318902E12, 306.0], [1.60318842E12, 303.0], [1.60318812E12, 278.0], [1.60318782E12, 477.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60318752E12, 668.5], [1.60318722E12, 492.0], [1.60318854E12, 1070.0], [1.60318824E12, 1074.0], [1.60318794E12, 1078.0], [1.60318884E12, 1102.0], [1.60318764E12, 805.0], [1.60318734E12, 399.0], [1.60318704E12, 390.0], [1.60318866E12, 1129.0], [1.60318836E12, 1108.0], [1.60318806E12, 1075.5], [1.60318776E12, 973.0], [1.60318746E12, 837.0], [1.60318716E12, 683.5], [1.60318878E12, 1125.0], [1.60318896E12, 1044.0], [1.60318848E12, 1188.0], [1.60318818E12, 1054.5], [1.60318788E12, 960.0], [1.6031889E12, 1057.0], [1.60318758E12, 475.0], [1.60318728E12, 510.0], [1.6031886E12, 1105.0], [1.6031883E12, 1078.0], [1.603188E12, 997.0], [1.6031877E12, 842.5], [1.6031874E12, 839.5], [1.6031871E12, 632.0], [1.60318872E12, 1100.0], [1.60318902E12, 1092.0], [1.60318842E12, 1331.0], [1.60318812E12, 851.0], [1.60318782E12, 1147.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318902E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 327.0, "minX": 1.0, "maxY": 524548.0, "series": [{"data": [[2.0, 4055.0], [3.0, 364.0], [4.0, 446.0], [5.0, 327.0], [6.0, 352.5], [7.0, 395.0], [8.0, 402.0], [9.0, 651.0], [10.0, 458.5], [11.0, 639.0], [12.0, 520.0], [13.0, 493.5], [14.0, 498.0], [15.0, 616.5], [16.0, 774.5], [17.0, 811.5], [18.0, 782.5], [19.0, 781.0], [20.0, 853.5], [21.0, 1004.0], [22.0, 898.0], [23.0, 935.0], [24.0, 996.0], [25.0, 1004.0], [26.0, 998.0], [27.0, 987.0], [28.0, 1029.0], [29.0, 1026.0], [30.0, 996.0], [31.0, 1005.0], [32.0, 985.0], [33.0, 1016.0], [34.0, 1019.0], [35.0, 943.0], [36.0, 980.5], [37.0, 1021.0], [39.0, 966.5], [38.0, 984.0], [41.0, 986.0], [40.0, 1084.0], [42.0, 1034.0], [43.0, 984.0], [45.0, 1080.0], [44.0, 1032.0], [46.0, 1008.5], [47.0, 1149.0], [48.0, 942.5], [49.0, 980.5], [50.0, 896.5], [51.0, 996.0], [53.0, 818.0], [52.0, 989.0], [54.0, 960.0], [55.0, 1087.5], [56.0, 983.5], [60.0, 1048.0], [1.0, 3459.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 23462.5], [3.0, 11279.0], [5.0, 23504.0], [6.0, 524548.0], [9.0, 11137.0], [10.0, 16144.5], [11.0, 15261.0], [12.0, 11149.0], [13.0, 23678.0], [14.0, 11731.0], [15.0, 11695.0], [16.0, 14061.5], [17.0, 11375.0], [18.0, 11170.5], [19.0, 12485.0], [20.0, 12209.5], [21.0, 11907.0], [22.0, 11569.0], [23.0, 11519.0], [24.0, 11467.0], [25.0, 11537.5], [26.0, 11529.5], [27.0, 11791.0], [28.0, 11706.0], [29.0, 11606.0], [30.0, 11460.5], [31.0, 11581.0], [32.0, 11530.0], [33.0, 11608.0], [35.0, 11570.0], [34.0, 11429.0], [36.0, 11531.0], [37.0, 11597.0], [38.0, 11560.0], [39.0, 11543.0], [41.0, 11527.0], [40.0, 11373.0], [42.0, 11414.0], [43.0, 11556.5], [45.0, 11471.0], [44.0, 11402.0], [47.0, 11247.5], [46.0, 11721.0], [48.0, 11353.0], [49.0, 11394.5], [50.0, 12265.5], [51.0, 11476.0], [53.0, 13107.0], [52.0, 12042.0], [54.0, 11641.0], [55.0, 11334.0], [60.0, 13943.0], [1.0, 21890.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4052.0, "series": [{"data": [[2.0, 4052.0], [3.0, 363.0], [4.0, 446.0], [5.0, 326.0], [6.0, 349.5], [7.0, 395.0], [8.0, 401.0], [9.0, 650.5], [10.0, 453.5], [11.0, 638.5], [12.0, 519.0], [13.0, 491.5], [14.0, 498.0], [15.0, 616.5], [16.0, 774.5], [17.0, 806.5], [18.0, 782.5], [19.0, 781.0], [20.0, 853.5], [21.0, 1004.0], [22.0, 898.0], [23.0, 934.5], [24.0, 994.5], [25.0, 1002.0], [26.0, 997.0], [27.0, 987.0], [28.0, 1029.0], [29.0, 1025.0], [30.0, 995.5], [31.0, 1005.0], [32.0, 985.0], [33.0, 1015.5], [34.0, 1018.0], [35.0, 943.0], [36.0, 979.5], [37.0, 1020.0], [39.0, 966.0], [38.0, 983.0], [41.0, 986.0], [40.0, 1084.0], [42.0, 1033.0], [43.0, 984.0], [45.0, 1079.0], [44.0, 1032.0], [46.0, 1007.5], [47.0, 1149.0], [48.0, 942.5], [49.0, 980.5], [50.0, 896.5], [51.0, 996.0], [53.0, 818.0], [52.0, 989.0], [54.0, 959.0], [55.0, 1087.5], [56.0, 983.5], [60.0, 1048.0], [1.0, 3456.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [5.0, 0.0], [6.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [32.0, 0.0], [33.0, 0.0], [35.0, 0.0], [34.0, 0.0], [36.0, 0.0], [37.0, 0.0], [38.0, 0.0], [39.0, 0.0], [41.0, 0.0], [40.0, 0.0], [42.0, 0.0], [43.0, 0.0], [45.0, 0.0], [44.0, 0.0], [47.0, 0.0], [46.0, 0.0], [48.0, 0.0], [49.0, 0.0], [50.0, 0.0], [51.0, 0.0], [53.0, 0.0], [52.0, 0.0], [54.0, 0.0], [55.0, 0.0], [60.0, 0.0], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.183333333333333, "minX": 1.60318704E12, "maxY": 37.55, "series": [{"data": [[1.60318752E12, 19.3], [1.60318722E12, 19.333333333333332], [1.60318854E12, 33.333333333333336], [1.60318824E12, 37.55], [1.60318794E12, 27.25], [1.60318884E12, 32.93333333333333], [1.60318764E12, 20.816666666666666], [1.60318734E12, 11.683333333333334], [1.60318704E12, 2.183333333333333], [1.60318866E12, 30.966666666666665], [1.60318836E12, 30.283333333333335], [1.60318806E12, 33.03333333333333], [1.60318776E12, 30.9], [1.60318746E12, 26.416666666666668], [1.60318716E12, 29.866666666666667], [1.60318878E12, 33.81666666666667], [1.60318896E12, 32.71666666666667], [1.60318848E12, 29.883333333333333], [1.60318818E12, 36.81666666666667], [1.60318788E12, 25.3], [1.6031889E12, 36.1], [1.60318758E12, 12.783333333333333], [1.60318728E12, 12.5], [1.6031886E12, 35.63333333333333], [1.6031883E12, 37.1], [1.603188E12, 30.1], [1.6031877E12, 31.0], [1.6031874E12, 25.516666666666666], [1.6031871E12, 28.95], [1.60318872E12, 31.966666666666665], [1.60318902E12, 33.95], [1.60318842E12, 24.316666666666666], [1.60318812E12, 30.0], [1.60318782E12, 27.783333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318902E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60318704E12, "maxY": 35.166666666666664, "series": [{"data": [[1.60318848E12, 0.26666666666666666], [1.60318788E12, 0.08333333333333333], [1.6031889E12, 0.08333333333333333], [1.60318854E12, 0.23333333333333334], [1.60318824E12, 0.2], [1.60318794E12, 0.08333333333333333], [1.60318884E12, 0.18333333333333332], [1.6031886E12, 0.3], [1.6031883E12, 0.11666666666666667], [1.60318866E12, 0.16666666666666666], [1.6031877E12, 0.016666666666666666], [1.60318908E12, 0.1], [1.60318836E12, 0.13333333333333333], [1.60318872E12, 0.08333333333333333], [1.60318776E12, 0.05], [1.60318902E12, 0.06666666666666667], [1.60318842E12, 0.08333333333333333], [1.60318782E12, 0.06666666666666667], [1.60318878E12, 0.18333333333333332], [1.60318896E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.60318752E12, 19.233333333333334], [1.60318722E12, 19.333333333333332], [1.60318854E12, 29.783333333333335], [1.60318824E12, 34.38333333333333], [1.60318794E12, 24.883333333333333], [1.60318884E12, 30.183333333333334], [1.60318764E12, 20.733333333333334], [1.60318734E12, 11.683333333333334], [1.60318704E12, 1.9833333333333334], [1.60318866E12, 28.75], [1.60318836E12, 26.966666666666665], [1.60318806E12, 32.0], [1.60318776E12, 29.316666666666666], [1.60318746E12, 26.1], [1.60318716E12, 29.833333333333332], [1.60318878E12, 30.45], [1.60318896E12, 32.35], [1.60318848E12, 26.65], [1.60318818E12, 35.166666666666664], [1.60318788E12, 23.783333333333335], [1.6031889E12, 33.75], [1.60318758E12, 12.783333333333333], [1.60318728E12, 12.5], [1.6031886E12, 32.36666666666667], [1.6031883E12, 34.36666666666667], [1.603188E12, 29.35], [1.6031877E12, 30.6], [1.6031874E12, 25.0], [1.6031871E12, 28.716666666666665], [1.60318872E12, 30.783333333333335], [1.60318902E12, 33.233333333333334], [1.60318842E12, 22.583333333333332], [1.60318812E12, 29.65], [1.60318782E12, 25.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6031871E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.60318752E12, 0.06666666666666667], [1.60318854E12, 3.316666666666667], [1.60318824E12, 3.033333333333333], [1.60318794E12, 2.283333333333333], [1.60318884E12, 2.566666666666667], [1.60318764E12, 0.08333333333333333], [1.60318866E12, 2.05], [1.60318908E12, 0.21666666666666667], [1.60318836E12, 3.183333333333333], [1.60318806E12, 1.0333333333333334], [1.60318776E12, 1.1666666666666667], [1.60318746E12, 0.3], [1.60318716E12, 0.03333333333333333], [1.60318878E12, 3.183333333333333], [1.60318896E12, 0.35], [1.60318848E12, 2.966666666666667], [1.60318818E12, 1.3666666666666667], [1.60318788E12, 1.4333333333333333], [1.6031889E12, 2.2666666666666666], [1.6031886E12, 2.966666666666667], [1.6031883E12, 2.6166666666666667], [1.603188E12, 0.75], [1.6031877E12, 0.38333333333333336], [1.6031874E12, 0.11666666666666667], [1.60318872E12, 1.1], [1.60318902E12, 2.0166666666666666], [1.60318842E12, 1.65], [1.60318812E12, 0.13333333333333333], [1.60318782E12, 1.9166666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318908E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60318704E12, "maxY": 35.166666666666664, "series": [{"data": [[1.60318752E12, 19.233333333333334], [1.60318722E12, 19.333333333333332], [1.60318854E12, 29.783333333333335], [1.60318824E12, 34.38333333333333], [1.60318794E12, 24.883333333333333], [1.60318884E12, 30.183333333333334], [1.60318764E12, 20.733333333333334], [1.60318734E12, 11.683333333333334], [1.60318704E12, 1.9833333333333334], [1.60318866E12, 28.75], [1.60318836E12, 26.966666666666665], [1.60318806E12, 32.0], [1.60318776E12, 29.316666666666666], [1.60318746E12, 26.1], [1.60318716E12, 29.833333333333332], [1.60318878E12, 30.45], [1.60318896E12, 32.35], [1.60318848E12, 26.65], [1.60318818E12, 35.166666666666664], [1.60318788E12, 23.783333333333335], [1.6031889E12, 33.75], [1.60318758E12, 12.783333333333333], [1.60318728E12, 12.5], [1.6031886E12, 32.36666666666667], [1.6031883E12, 34.36666666666667], [1.603188E12, 29.35], [1.6031877E12, 30.6], [1.6031874E12, 25.0], [1.6031871E12, 28.716666666666665], [1.60318872E12, 30.783333333333335], [1.60318902E12, 33.233333333333334], [1.60318842E12, 22.583333333333332], [1.60318812E12, 29.65], [1.60318782E12, 25.75]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.60318752E12, 0.06666666666666667], [1.60318854E12, 3.55], [1.60318824E12, 3.2333333333333334], [1.60318794E12, 2.3666666666666667], [1.60318884E12, 2.75], [1.60318764E12, 0.08333333333333333], [1.60318866E12, 2.216666666666667], [1.60318908E12, 0.31666666666666665], [1.60318836E12, 3.316666666666667], [1.60318806E12, 1.0333333333333334], [1.60318776E12, 1.2166666666666666], [1.60318746E12, 0.3], [1.60318716E12, 0.03333333333333333], [1.60318878E12, 3.3666666666666667], [1.60318896E12, 0.36666666666666664], [1.60318848E12, 3.2333333333333334], [1.60318818E12, 1.3666666666666667], [1.60318788E12, 1.5166666666666666], [1.6031889E12, 2.35], [1.6031886E12, 3.2666666666666666], [1.6031883E12, 2.7333333333333334], [1.603188E12, 0.75], [1.6031877E12, 0.4], [1.6031874E12, 0.11666666666666667], [1.6031871E12, 0.016666666666666666], [1.60318872E12, 1.1833333333333333], [1.60318902E12, 2.0833333333333335], [1.60318842E12, 1.7333333333333334], [1.60318812E12, 0.13333333333333333], [1.60318782E12, 1.9833333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60318704E12, "maxY": 35.166666666666664, "series": [{"data": [[1.60318752E12, 19.233333333333334], [1.60318722E12, 19.333333333333332], [1.60318854E12, 29.783333333333335], [1.60318824E12, 34.38333333333333], [1.60318794E12, 24.883333333333333], [1.60318884E12, 30.183333333333334], [1.60318764E12, 20.733333333333334], [1.60318734E12, 11.683333333333334], [1.60318704E12, 1.9833333333333334], [1.60318866E12, 28.75], [1.60318836E12, 26.966666666666665], [1.60318806E12, 32.0], [1.60318776E12, 29.316666666666666], [1.60318746E12, 26.1], [1.60318716E12, 29.833333333333332], [1.60318878E12, 30.45], [1.60318896E12, 32.35], [1.60318848E12, 26.65], [1.60318818E12, 35.166666666666664], [1.60318788E12, 23.783333333333335], [1.6031889E12, 33.75], [1.60318758E12, 12.783333333333333], [1.60318728E12, 12.5], [1.6031886E12, 32.36666666666667], [1.6031883E12, 34.36666666666667], [1.603188E12, 29.35], [1.6031877E12, 30.6], [1.6031874E12, 25.0], [1.6031871E12, 28.716666666666665], [1.60318872E12, 30.783333333333335], [1.60318902E12, 33.233333333333334], [1.60318842E12, 22.583333333333332], [1.60318812E12, 29.65], [1.60318782E12, 25.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60318752E12, 0.06666666666666667], [1.60318854E12, 3.55], [1.60318824E12, 3.2333333333333334], [1.60318794E12, 2.3666666666666667], [1.60318884E12, 2.75], [1.60318764E12, 0.08333333333333333], [1.60318866E12, 2.216666666666667], [1.60318908E12, 0.31666666666666665], [1.60318836E12, 3.316666666666667], [1.60318806E12, 1.0333333333333334], [1.60318776E12, 1.2166666666666666], [1.60318746E12, 0.3], [1.60318716E12, 0.03333333333333333], [1.60318878E12, 3.3666666666666667], [1.60318896E12, 0.36666666666666664], [1.60318848E12, 3.2333333333333334], [1.60318818E12, 1.3666666666666667], [1.60318788E12, 1.5166666666666666], [1.6031889E12, 2.35], [1.6031886E12, 3.2666666666666666], [1.6031883E12, 2.7333333333333334], [1.603188E12, 0.75], [1.6031877E12, 0.4], [1.6031874E12, 0.11666666666666667], [1.6031871E12, 0.016666666666666666], [1.60318872E12, 1.1833333333333333], [1.60318902E12, 2.0833333333333335], [1.60318842E12, 1.7333333333333334], [1.60318812E12, 0.13333333333333333], [1.60318782E12, 1.9833333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

