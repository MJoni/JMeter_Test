/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 273.0, "minX": 0.0, "maxY": 1325180.0, "series": [{"data": [[0.0, 273.0], [0.1, 286.0], [0.2, 290.0], [0.3, 294.0], [0.4, 296.0], [0.5, 298.0], [0.6, 299.0], [0.7, 301.0], [0.8, 303.0], [0.9, 304.0], [1.0, 305.0], [1.1, 307.0], [1.2, 309.0], [1.3, 311.0], [1.4, 312.0], [1.5, 314.0], [1.6, 315.0], [1.7, 316.0], [1.8, 318.0], [1.9, 319.0], [2.0, 321.0], [2.1, 322.0], [2.2, 324.0], [2.3, 325.0], [2.4, 327.0], [2.5, 328.0], [2.6, 329.0], [2.7, 331.0], [2.8, 332.0], [2.9, 334.0], [3.0, 335.0], [3.1, 336.0], [3.2, 338.0], [3.3, 340.0], [3.4, 341.0], [3.5, 343.0], [3.6, 344.0], [3.7, 346.0], [3.8, 347.0], [3.9, 349.0], [4.0, 350.0], [4.1, 352.0], [4.2, 354.0], [4.3, 356.0], [4.4, 357.0], [4.5, 359.0], [4.6, 361.0], [4.7, 363.0], [4.8, 365.0], [4.9, 367.0], [5.0, 368.0], [5.1, 370.0], [5.2, 372.0], [5.3, 374.0], [5.4, 375.0], [5.5, 377.0], [5.6, 379.0], [5.7, 381.0], [5.8, 382.0], [5.9, 384.0], [6.0, 386.0], [6.1, 388.0], [6.2, 390.0], [6.3, 392.0], [6.4, 394.0], [6.5, 396.0], [6.6, 397.0], [6.7, 399.0], [6.8, 402.0], [6.9, 404.0], [7.0, 406.0], [7.1, 408.0], [7.2, 410.0], [7.3, 411.0], [7.4, 414.0], [7.5, 416.0], [7.6, 418.0], [7.7, 420.0], [7.8, 423.0], [7.9, 425.0], [8.0, 427.0], [8.1, 429.0], [8.2, 432.0], [8.3, 434.0], [8.4, 437.0], [8.5, 440.0], [8.6, 442.0], [8.7, 444.0], [8.8, 447.0], [8.9, 449.0], [9.0, 451.0], [9.1, 453.0], [9.2, 455.0], [9.3, 457.0], [9.4, 459.0], [9.5, 461.0], [9.6, 463.0], [9.7, 466.0], [9.8, 468.0], [9.9, 469.0], [10.0, 472.0], [10.1, 474.0], [10.2, 476.0], [10.3, 478.0], [10.4, 479.0], [10.5, 481.0], [10.6, 482.0], [10.7, 484.0], [10.8, 487.0], [10.9, 489.0], [11.0, 491.0], [11.1, 492.0], [11.2, 495.0], [11.3, 496.0], [11.4, 498.0], [11.5, 500.0], [11.6, 502.0], [11.7, 504.0], [11.8, 506.0], [11.9, 508.0], [12.0, 510.0], [12.1, 512.0], [12.2, 514.0], [12.3, 515.0], [12.4, 517.0], [12.5, 519.0], [12.6, 521.0], [12.7, 523.0], [12.8, 525.0], [12.9, 527.0], [13.0, 528.0], [13.1, 531.0], [13.2, 533.0], [13.3, 535.0], [13.4, 537.0], [13.5, 538.0], [13.6, 540.0], [13.7, 542.0], [13.8, 545.0], [13.9, 546.0], [14.0, 548.0], [14.1, 550.0], [14.2, 551.0], [14.3, 553.0], [14.4, 554.0], [14.5, 556.0], [14.6, 558.0], [14.7, 560.0], [14.8, 562.0], [14.9, 564.0], [15.0, 566.0], [15.1, 567.0], [15.2, 569.0], [15.3, 572.0], [15.4, 574.0], [15.5, 575.0], [15.6, 577.0], [15.7, 579.0], [15.8, 581.0], [15.9, 583.0], [16.0, 585.0], [16.1, 586.0], [16.2, 588.0], [16.3, 590.0], [16.4, 591.0], [16.5, 593.0], [16.6, 594.0], [16.7, 596.0], [16.8, 597.0], [16.9, 599.0], [17.0, 601.0], [17.1, 602.0], [17.2, 604.0], [17.3, 605.0], [17.4, 608.0], [17.5, 609.0], [17.6, 611.0], [17.7, 612.0], [17.8, 614.0], [17.9, 616.0], [18.0, 618.0], [18.1, 619.0], [18.2, 621.0], [18.3, 623.0], [18.4, 624.0], [18.5, 626.0], [18.6, 627.0], [18.7, 629.0], [18.8, 630.0], [18.9, 632.0], [19.0, 633.0], [19.1, 635.0], [19.2, 636.0], [19.3, 637.0], [19.4, 639.0], [19.5, 640.0], [19.6, 642.0], [19.7, 643.0], [19.8, 644.0], [19.9, 646.0], [20.0, 647.0], [20.1, 649.0], [20.2, 650.0], [20.3, 651.0], [20.4, 652.0], [20.5, 653.0], [20.6, 655.0], [20.7, 656.0], [20.8, 657.0], [20.9, 659.0], [21.0, 660.0], [21.1, 661.0], [21.2, 663.0], [21.3, 664.0], [21.4, 665.0], [21.5, 666.0], [21.6, 667.0], [21.7, 668.0], [21.8, 670.0], [21.9, 671.0], [22.0, 672.0], [22.1, 673.0], [22.2, 674.0], [22.3, 676.0], [22.4, 677.0], [22.5, 678.0], [22.6, 679.0], [22.7, 680.0], [22.8, 682.0], [22.9, 683.0], [23.0, 684.0], [23.1, 685.0], [23.2, 686.0], [23.3, 687.0], [23.4, 688.0], [23.5, 690.0], [23.6, 690.0], [23.7, 691.0], [23.8, 693.0], [23.9, 694.0], [24.0, 695.0], [24.1, 696.0], [24.2, 698.0], [24.3, 698.0], [24.4, 700.0], [24.5, 701.0], [24.6, 702.0], [24.7, 703.0], [24.8, 704.0], [24.9, 705.0], [25.0, 706.0], [25.1, 707.0], [25.2, 708.0], [25.3, 709.0], [25.4, 711.0], [25.5, 712.0], [25.6, 713.0], [25.7, 714.0], [25.8, 715.0], [25.9, 716.0], [26.0, 717.0], [26.1, 718.0], [26.2, 719.0], [26.3, 720.0], [26.4, 721.0], [26.5, 722.0], [26.6, 723.0], [26.7, 724.0], [26.8, 725.0], [26.9, 726.0], [27.0, 727.0], [27.1, 728.0], [27.2, 729.0], [27.3, 730.0], [27.4, 731.0], [27.5, 732.0], [27.6, 733.0], [27.7, 735.0], [27.8, 736.0], [27.9, 737.0], [28.0, 737.0], [28.1, 738.0], [28.2, 739.0], [28.3, 740.0], [28.4, 741.0], [28.5, 742.0], [28.6, 743.0], [28.7, 745.0], [28.8, 745.0], [28.9, 747.0], [29.0, 747.0], [29.1, 748.0], [29.2, 749.0], [29.3, 750.0], [29.4, 751.0], [29.5, 752.0], [29.6, 753.0], [29.7, 754.0], [29.8, 755.0], [29.9, 756.0], [30.0, 757.0], [30.1, 758.0], [30.2, 759.0], [30.3, 760.0], [30.4, 761.0], [30.5, 762.0], [30.6, 763.0], [30.7, 765.0], [30.8, 766.0], [30.9, 767.0], [31.0, 768.0], [31.1, 769.0], [31.2, 770.0], [31.3, 771.0], [31.4, 772.0], [31.5, 773.0], [31.6, 774.0], [31.7, 775.0], [31.8, 776.0], [31.9, 777.0], [32.0, 778.0], [32.1, 779.0], [32.2, 780.0], [32.3, 781.0], [32.4, 782.0], [32.5, 783.0], [32.6, 784.0], [32.7, 785.0], [32.8, 785.0], [32.9, 787.0], [33.0, 788.0], [33.1, 788.0], [33.2, 789.0], [33.3, 790.0], [33.4, 791.0], [33.5, 792.0], [33.6, 793.0], [33.7, 794.0], [33.8, 795.0], [33.9, 796.0], [34.0, 797.0], [34.1, 799.0], [34.2, 800.0], [34.3, 801.0], [34.4, 802.0], [34.5, 803.0], [34.6, 804.0], [34.7, 805.0], [34.8, 806.0], [34.9, 806.0], [35.0, 807.0], [35.1, 808.0], [35.2, 809.0], [35.3, 810.0], [35.4, 811.0], [35.5, 813.0], [35.6, 814.0], [35.7, 815.0], [35.8, 816.0], [35.9, 817.0], [36.0, 818.0], [36.1, 819.0], [36.2, 820.0], [36.3, 821.0], [36.4, 822.0], [36.5, 823.0], [36.6, 825.0], [36.7, 825.0], [36.8, 827.0], [36.9, 828.0], [37.0, 829.0], [37.1, 830.0], [37.2, 831.0], [37.3, 832.0], [37.4, 833.0], [37.5, 834.0], [37.6, 835.0], [37.7, 837.0], [37.8, 838.0], [37.9, 839.0], [38.0, 840.0], [38.1, 841.0], [38.2, 842.0], [38.3, 843.0], [38.4, 844.0], [38.5, 846.0], [38.6, 847.0], [38.7, 848.0], [38.8, 849.0], [38.9, 850.0], [39.0, 851.0], [39.1, 852.0], [39.2, 853.0], [39.3, 854.0], [39.4, 855.0], [39.5, 857.0], [39.6, 858.0], [39.7, 859.0], [39.8, 860.0], [39.9, 861.0], [40.0, 862.0], [40.1, 863.0], [40.2, 865.0], [40.3, 866.0], [40.4, 867.0], [40.5, 868.0], [40.6, 869.0], [40.7, 870.0], [40.8, 871.0], [40.9, 873.0], [41.0, 874.0], [41.1, 875.0], [41.2, 876.0], [41.3, 878.0], [41.4, 879.0], [41.5, 880.0], [41.6, 881.0], [41.7, 882.0], [41.8, 883.0], [41.9, 884.0], [42.0, 886.0], [42.1, 887.0], [42.2, 888.0], [42.3, 889.0], [42.4, 891.0], [42.5, 891.0], [42.6, 893.0], [42.7, 894.0], [42.8, 895.0], [42.9, 896.0], [43.0, 898.0], [43.1, 899.0], [43.2, 900.0], [43.3, 902.0], [43.4, 903.0], [43.5, 904.0], [43.6, 905.0], [43.7, 907.0], [43.8, 908.0], [43.9, 909.0], [44.0, 910.0], [44.1, 911.0], [44.2, 913.0], [44.3, 914.0], [44.4, 915.0], [44.5, 916.0], [44.6, 918.0], [44.7, 919.0], [44.8, 920.0], [44.9, 921.0], [45.0, 923.0], [45.1, 924.0], [45.2, 925.0], [45.3, 926.0], [45.4, 928.0], [45.5, 929.0], [45.6, 930.0], [45.7, 931.0], [45.8, 933.0], [45.9, 934.0], [46.0, 935.0], [46.1, 936.0], [46.2, 938.0], [46.3, 939.0], [46.4, 940.0], [46.5, 942.0], [46.6, 944.0], [46.7, 945.0], [46.8, 946.0], [46.9, 947.0], [47.0, 948.0], [47.1, 950.0], [47.2, 951.0], [47.3, 952.0], [47.4, 954.0], [47.5, 955.0], [47.6, 956.0], [47.7, 958.0], [47.8, 959.0], [47.9, 960.0], [48.0, 961.0], [48.1, 963.0], [48.2, 964.0], [48.3, 966.0], [48.4, 967.0], [48.5, 968.0], [48.6, 969.0], [48.7, 971.0], [48.8, 973.0], [48.9, 974.0], [49.0, 976.0], [49.1, 977.0], [49.2, 979.0], [49.3, 980.0], [49.4, 982.0], [49.5, 984.0], [49.6, 985.0], [49.7, 987.0], [49.8, 988.0], [49.9, 990.0], [50.0, 991.0], [50.1, 993.0], [50.2, 994.0], [50.3, 996.0], [50.4, 997.0], [50.5, 999.0], [50.6, 1000.0], [50.7, 1002.0], [50.8, 1003.0], [50.9, 1004.0], [51.0, 1006.0], [51.1, 1008.0], [51.2, 1009.0], [51.3, 1011.0], [51.4, 1012.0], [51.5, 1014.0], [51.6, 1016.0], [51.7, 1017.0], [51.8, 1019.0], [51.9, 1020.0], [52.0, 1022.0], [52.1, 1024.0], [52.2, 1025.0], [52.3, 1027.0], [52.4, 1028.0], [52.5, 1030.0], [52.6, 1031.0], [52.7, 1033.0], [52.8, 1035.0], [52.9, 1037.0], [53.0, 1038.0], [53.1, 1040.0], [53.2, 1042.0], [53.3, 1043.0], [53.4, 1045.0], [53.5, 1046.0], [53.6, 1048.0], [53.7, 1050.0], [53.8, 1051.0], [53.9, 1053.0], [54.0, 1055.0], [54.1, 1057.0], [54.2, 1059.0], [54.3, 1060.0], [54.4, 1062.0], [54.5, 1063.0], [54.6, 1065.0], [54.7, 1067.0], [54.8, 1069.0], [54.9, 1071.0], [55.0, 1073.0], [55.1, 1075.0], [55.2, 1077.0], [55.3, 1079.0], [55.4, 1081.0], [55.5, 1083.0], [55.6, 1085.0], [55.7, 1087.0], [55.8, 1089.0], [55.9, 1091.0], [56.0, 1093.0], [56.1, 1095.0], [56.2, 1098.0], [56.3, 1100.0], [56.4, 1103.0], [56.5, 1104.0], [56.6, 1106.0], [56.7, 1108.0], [56.8, 1110.0], [56.9, 1113.0], [57.0, 1116.0], [57.1, 1118.0], [57.2, 1120.0], [57.3, 1122.0], [57.4, 1125.0], [57.5, 1127.0], [57.6, 1129.0], [57.7, 1131.0], [57.8, 1134.0], [57.9, 1136.0], [58.0, 1139.0], [58.1, 1141.0], [58.2, 1144.0], [58.3, 1146.0], [58.4, 1149.0], [58.5, 1152.0], [58.6, 1154.0], [58.7, 1156.0], [58.8, 1159.0], [58.9, 1161.0], [59.0, 1164.0], [59.1, 1167.0], [59.2, 1169.0], [59.3, 1172.0], [59.4, 1174.0], [59.5, 1176.0], [59.6, 1179.0], [59.7, 1181.0], [59.8, 1184.0], [59.9, 1186.0], [60.0, 1189.0], [60.1, 1192.0], [60.2, 1195.0], [60.3, 1197.0], [60.4, 1200.0], [60.5, 1202.0], [60.6, 1205.0], [60.7, 1208.0], [60.8, 1210.0], [60.9, 1214.0], [61.0, 1216.0], [61.1, 1219.0], [61.2, 1222.0], [61.3, 1226.0], [61.4, 1230.0], [61.5, 1233.0], [61.6, 1236.0], [61.7, 1238.0], [61.8, 1241.0], [61.9, 1245.0], [62.0, 1247.0], [62.1, 1250.0], [62.2, 1252.0], [62.3, 1256.0], [62.4, 1259.0], [62.5, 1262.0], [62.6, 1264.0], [62.7, 1268.0], [62.8, 1271.0], [62.9, 1274.0], [63.0, 1277.0], [63.1, 1280.0], [63.2, 1284.0], [63.3, 1288.0], [63.4, 1291.0], [63.5, 1294.0], [63.6, 1298.0], [63.7, 1301.0], [63.8, 1305.0], [63.9, 1309.0], [64.0, 1313.0], [64.1, 1316.0], [64.2, 1320.0], [64.3, 1325.0], [64.4, 1328.0], [64.5, 1331.0], [64.6, 1335.0], [64.7, 1338.0], [64.8, 1343.0], [64.9, 1347.0], [65.0, 1351.0], [65.1, 1355.0], [65.2, 1359.0], [65.3, 1366.0], [65.4, 1369.0], [65.5, 1374.0], [65.6, 1378.0], [65.7, 1382.0], [65.8, 1387.0], [65.9, 1391.0], [66.0, 1396.0], [66.1, 1402.0], [66.2, 1407.0], [66.3, 1411.0], [66.4, 1415.0], [66.5, 1420.0], [66.6, 1425.0], [66.7, 1430.0], [66.8, 1436.0], [66.9, 1441.0], [67.0, 1445.0], [67.1, 1449.0], [67.2, 1455.0], [67.3, 1460.0], [67.4, 1466.0], [67.5, 1473.0], [67.6, 1478.0], [67.7, 1483.0], [67.8, 1490.0], [67.9, 1494.0], [68.0, 1499.0], [68.1, 1505.0], [68.2, 1511.0], [68.3, 1517.0], [68.4, 1523.0], [68.5, 1529.0], [68.6, 1535.0], [68.7, 1540.0], [68.8, 1546.0], [68.9, 1554.0], [69.0, 1560.0], [69.1, 1568.0], [69.2, 1573.0], [69.3, 1580.0], [69.4, 1587.0], [69.5, 1594.0], [69.6, 1601.0], [69.7, 1606.0], [69.8, 1611.0], [69.9, 1618.0], [70.0, 1624.0], [70.1, 1632.0], [70.2, 1638.0], [70.3, 1646.0], [70.4, 1652.0], [70.5, 1660.0], [70.6, 1668.0], [70.7, 1676.0], [70.8, 1682.0], [70.9, 1689.0], [71.0, 1695.0], [71.1, 1704.0], [71.2, 1712.0], [71.3, 1719.0], [71.4, 1725.0], [71.5, 1731.0], [71.6, 1739.0], [71.7, 1745.0], [71.8, 1752.0], [71.9, 1760.0], [72.0, 1768.0], [72.1, 1776.0], [72.2, 1782.0], [72.3, 1790.0], [72.4, 1796.0], [72.5, 1802.0], [72.6, 1807.0], [72.7, 1813.0], [72.8, 1819.0], [72.9, 1826.0], [73.0, 1832.0], [73.1, 1839.0], [73.2, 1847.0], [73.3, 1854.0], [73.4, 1861.0], [73.5, 1868.0], [73.6, 1875.0], [73.7, 1882.0], [73.8, 1890.0], [73.9, 1898.0], [74.0, 1905.0], [74.1, 1913.0], [74.2, 1919.0], [74.3, 1928.0], [74.4, 1934.0], [74.5, 1941.0], [74.6, 1948.0], [74.7, 1958.0], [74.8, 1966.0], [74.9, 1976.0], [75.0, 1986.0], [75.1, 1992.0], [75.2, 2000.0], [75.3, 2007.0], [75.4, 2015.0], [75.5, 2022.0], [75.6, 2030.0], [75.7, 2036.0], [75.8, 2044.0], [75.9, 2052.0], [76.0, 2059.0], [76.1, 2068.0], [76.2, 2076.0], [76.3, 2083.0], [76.4, 2091.0], [76.5, 2100.0], [76.6, 2108.0], [76.7, 2116.0], [76.8, 2126.0], [76.9, 2136.0], [77.0, 2146.0], [77.1, 2154.0], [77.2, 2163.0], [77.3, 2173.0], [77.4, 2181.0], [77.5, 2189.0], [77.6, 2199.0], [77.7, 2210.0], [77.8, 2219.0], [77.9, 2227.0], [78.0, 2235.0], [78.1, 2246.0], [78.2, 2257.0], [78.3, 2268.0], [78.4, 2279.0], [78.5, 2287.0], [78.6, 2301.0], [78.7, 2312.0], [78.8, 2322.0], [78.9, 2333.0], [79.0, 2345.0], [79.1, 2353.0], [79.2, 2362.0], [79.3, 2372.0], [79.4, 2382.0], [79.5, 2391.0], [79.6, 2402.0], [79.7, 2412.0], [79.8, 2423.0], [79.9, 2436.0], [80.0, 2447.0], [80.1, 2459.0], [80.2, 2472.0], [80.3, 2485.0], [80.4, 2493.0], [80.5, 2507.0], [80.6, 2519.0], [80.7, 2531.0], [80.8, 2544.0], [80.9, 2556.0], [81.0, 2571.0], [81.1, 2582.0], [81.2, 2596.0], [81.3, 2616.0], [81.4, 2631.0], [81.5, 2649.0], [81.6, 2670.0], [81.7, 2688.0], [81.8, 2699.0], [81.9, 2717.0], [82.0, 2734.0], [82.1, 2751.0], [82.2, 2770.0], [82.3, 2793.0], [82.4, 2816.0], [82.5, 2836.0], [82.6, 2866.0], [82.7, 2890.0], [82.8, 2919.0], [82.9, 2948.0], [83.0, 2984.0], [83.1, 3009.0], [83.2, 3049.0], [83.3, 3090.0], [83.4, 3128.0], [83.5, 3172.0], [83.6, 3206.0], [83.7, 3252.0], [83.8, 3295.0], [83.9, 3344.0], [84.0, 3388.0], [84.1, 3436.0], [84.2, 3484.0], [84.3, 3535.0], [84.4, 3577.0], [84.5, 3615.0], [84.6, 3651.0], [84.7, 3699.0], [84.8, 3744.0], [84.9, 3782.0], [85.0, 3839.0], [85.1, 3884.0], [85.2, 3929.0], [85.3, 3980.0], [85.4, 4034.0], [85.5, 4077.0], [85.6, 4137.0], [85.7, 4182.0], [85.8, 4235.0], [85.9, 4281.0], [86.0, 4335.0], [86.1, 4384.0], [86.2, 4429.0], [86.3, 4486.0], [86.4, 4531.0], [86.5, 4590.0], [86.6, 4656.0], [86.7, 4708.0], [86.8, 4773.0], [86.9, 4842.0], [87.0, 4904.0], [87.1, 4970.0], [87.2, 5043.0], [87.3, 5112.0], [87.4, 5193.0], [87.5, 5258.0], [87.6, 5332.0], [87.7, 5407.0], [87.8, 5468.0], [87.9, 5539.0], [88.0, 5602.0], [88.1, 5676.0], [88.2, 5753.0], [88.3, 5826.0], [88.4, 5898.0], [88.5, 5973.0], [88.6, 6047.0], [88.7, 6108.0], [88.8, 6180.0], [88.9, 6248.0], [89.0, 6318.0], [89.1, 6369.0], [89.2, 6430.0], [89.3, 6487.0], [89.4, 6571.0], [89.5, 6633.0], [89.6, 6709.0], [89.7, 6771.0], [89.8, 6838.0], [89.9, 6912.0], [90.0, 6956.0], [90.1, 7022.0], [90.2, 7075.0], [90.3, 7140.0], [90.4, 7225.0], [90.5, 7292.0], [90.6, 7390.0], [90.7, 7451.0], [90.8, 7523.0], [90.9, 7589.0], [91.0, 7667.0], [91.1, 7789.0], [91.2, 7884.0], [91.3, 7970.0], [91.4, 8045.0], [91.5, 8144.0], [91.6, 8248.0], [91.7, 8373.0], [91.8, 8457.0], [91.9, 8578.0], [92.0, 8739.0], [92.1, 8865.0], [92.2, 9004.0], [92.3, 9143.0], [92.4, 9267.0], [92.5, 9454.0], [92.6, 9593.0], [92.7, 9808.0], [92.8, 10032.0], [92.9, 10229.0], [93.0, 10429.0], [93.1, 10632.0], [93.2, 10784.0], [93.3, 10889.0], [93.4, 10938.0], [93.5, 10986.0], [93.6, 11022.0], [93.7, 11057.0], [93.8, 11088.0], [93.9, 11116.0], [94.0, 11144.0], [94.1, 11170.0], [94.2, 11190.0], [94.3, 11218.0], [94.4, 11246.0], [94.5, 11271.0], [94.6, 11285.0], [94.7, 11309.0], [94.8, 11326.0], [94.9, 11348.0], [95.0, 11365.0], [95.1, 11387.0], [95.2, 11414.0], [95.3, 11435.0], [95.4, 11458.0], [95.5, 11484.0], [95.6, 11506.0], [95.7, 11537.0], [95.8, 11568.0], [95.9, 11598.0], [96.0, 11635.0], [96.1, 11678.0], [96.2, 11716.0], [96.3, 11766.0], [96.4, 11849.0], [96.5, 11917.0], [96.6, 12022.0], [96.7, 12144.0], [96.8, 12262.0], [96.9, 12385.0], [97.0, 12542.0], [97.1, 12769.0], [97.2, 12990.0], [97.3, 13227.0], [97.4, 13454.0], [97.5, 13729.0], [97.6, 13946.0], [97.7, 14207.0], [97.8, 14516.0], [97.9, 14865.0], [98.0, 15244.0], [98.1, 15560.0], [98.2, 16028.0], [98.3, 16606.0], [98.4, 17080.0], [98.5, 17669.0], [98.6, 18160.0], [98.7, 18543.0], [98.8, 19611.0], [98.9, 20489.0], [99.0, 21968.0], [99.1, 23201.0], [99.2, 23438.0], [99.3, 23586.0], [99.4, 23765.0], [99.5, 23972.0], [99.6, 24741.0], [99.7, 27143.0], [99.8, 30758.0], [99.9, 47491.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 4406.0, "series": [{"data": [[1211700.0, 1.0], [646300.0, 1.0], [862900.0, 1.0], [34500.0, 1.0], [32900.0, 1.0], [34900.0, 1.0], [36100.0, 1.0], [36900.0, 1.0], [42500.0, 1.0], [47300.0, 2.0], [48100.0, 1.0], [49700.0, 1.0], [200.0, 270.0], [53300.0, 1.0], [56500.0, 1.0], [64500.0, 1.0], [300.0, 2747.0], [400.0, 2129.0], [1197900.0, 1.0], [500.0, 2461.0], [600.0, 3342.0], [700.0, 4406.0], [800.0, 4028.0], [900.0, 3328.0], [1000.0, 2563.0], [780500.0, 1.0], [1100.0, 1851.0], [1200.0, 1471.0], [1300.0, 1073.0], [1400.0, 875.0], [1500.0, 708.0], [1600.0, 662.0], [1700.0, 632.0], [1800.0, 655.0], [1900.0, 570.0], [2000.0, 588.0], [2100.0, 496.0], [2200.0, 447.0], [2300.0, 442.0], [2400.0, 387.0], [2500.0, 349.0], [2600.0, 262.0], [2800.0, 179.0], [2700.0, 235.0], [2900.0, 153.0], [3000.0, 123.0], [3100.0, 107.0], [3300.0, 95.0], [3200.0, 106.0], [3400.0, 93.0], [3500.0, 107.0], [3700.0, 103.0], [3600.0, 105.0], [3800.0, 92.0], [3900.0, 85.0], [4000.0, 92.0], [4100.0, 93.0], [4200.0, 90.0], [4300.0, 88.0], [4400.0, 85.0], [4600.0, 74.0], [4500.0, 87.0], [4700.0, 71.0], [4800.0, 67.0], [4900.0, 68.0], [5000.0, 62.0], [5100.0, 60.0], [5200.0, 69.0], [5300.0, 55.0], [5400.0, 74.0], [5600.0, 56.0], [5500.0, 65.0], [5800.0, 59.0], [5700.0, 66.0], [6100.0, 66.0], [5900.0, 59.0], [6000.0, 65.0], [6300.0, 78.0], [6200.0, 69.0], [6400.0, 76.0], [6500.0, 55.0], [6600.0, 64.0], [6800.0, 65.0], [6900.0, 83.0], [6700.0, 69.0], [7100.0, 55.0], [7000.0, 85.0], [7300.0, 51.0], [7200.0, 56.0], [7400.0, 67.0], [7500.0, 72.0], [7600.0, 41.0], [7800.0, 50.0], [7900.0, 62.0], [7700.0, 39.0], [8100.0, 39.0], [8000.0, 51.0], [509800.0, 1.0], [8700.0, 30.0], [8400.0, 52.0], [8200.0, 40.0], [8300.0, 39.0], [8600.0, 31.0], [8500.0, 31.0], [9200.0, 32.0], [9100.0, 29.0], [8800.0, 34.0], [8900.0, 31.0], [9000.0, 36.0], [9600.0, 25.0], [9500.0, 29.0], [9400.0, 31.0], [9700.0, 18.0], [9300.0, 25.0], [10200.0, 26.0], [10000.0, 24.0], [10100.0, 19.0], [9800.0, 18.0], [9900.0, 21.0], [10500.0, 18.0], [10600.0, 31.0], [10300.0, 20.0], [10700.0, 32.0], [10400.0, 22.0], [10900.0, 94.0], [10800.0, 49.0], [11000.0, 136.0], [11200.0, 194.0], [11100.0, 182.0], [11300.0, 210.0], [11700.0, 77.0], [11500.0, 152.0], [11600.0, 114.0], [11400.0, 193.0], [11900.0, 44.0], [12200.0, 45.0], [12100.0, 40.0], [11800.0, 69.0], [12000.0, 34.0], [12600.0, 18.0], [12500.0, 24.0], [12400.0, 32.0], [12300.0, 27.0], [12700.0, 19.0], [13000.0, 26.0], [12800.0, 15.0], [13100.0, 13.0], [12900.0, 25.0], [13200.0, 18.0], [13300.0, 16.0], [13400.0, 23.0], [13500.0, 20.0], [13700.0, 19.0], [13800.0, 17.0], [13600.0, 13.0], [14200.0, 21.0], [14000.0, 18.0], [14300.0, 13.0], [14100.0, 19.0], [13900.0, 20.0], [646900.0, 1.0], [14400.0, 8.0], [14700.0, 12.0], [14800.0, 18.0], [14600.0, 16.0], [14500.0, 9.0], [15000.0, 9.0], [15100.0, 11.0], [14900.0, 12.0], [15200.0, 15.0], [15300.0, 13.0], [15500.0, 10.0], [15400.0, 17.0], [15700.0, 12.0], [15600.0, 8.0], [15800.0, 10.0], [16000.0, 9.0], [15900.0, 9.0], [16200.0, 9.0], [16100.0, 4.0], [16300.0, 6.0], [17200.0, 12.0], [16400.0, 8.0], [17000.0, 10.0], [16600.0, 12.0], [17400.0, 9.0], [16800.0, 8.0], [18400.0, 14.0], [18200.0, 11.0], [18000.0, 11.0], [17800.0, 8.0], [17600.0, 6.0], [19000.0, 8.0], [19200.0, 5.0], [19400.0, 4.0], [18600.0, 6.0], [18800.0, 1.0], [19600.0, 8.0], [20000.0, 4.0], [20400.0, 3.0], [20200.0, 6.0], [19800.0, 7.0], [21200.0, 4.0], [21000.0, 1.0], [20600.0, 4.0], [21400.0, 2.0], [20800.0, 2.0], [22200.0, 3.0], [21600.0, 3.0], [21800.0, 2.0], [22000.0, 5.0], [22400.0, 3.0], [23000.0, 4.0], [23200.0, 8.0], [22600.0, 2.0], [23400.0, 27.0], [22800.0, 4.0], [23800.0, 20.0], [24000.0, 13.0], [23600.0, 28.0], [24200.0, 7.0], [24400.0, 3.0], [24800.0, 2.0], [25000.0, 4.0], [24600.0, 4.0], [25200.0, 1.0], [25400.0, 1.0], [25600.0, 3.0], [26400.0, 1.0], [26000.0, 2.0], [26600.0, 2.0], [26200.0, 3.0], [26800.0, 1.0], [27000.0, 2.0], [28200.0, 2.0], [28600.0, 1.0], [27800.0, 3.0], [28400.0, 1.0], [28000.0, 1.0], [28800.0, 1.0], [29600.0, 1.0], [29800.0, 1.0], [30600.0, 1.0], [30200.0, 5.0], [31200.0, 1.0], [31600.0, 1.0], [31400.0, 1.0], [30800.0, 1.0], [32000.0, 2.0], [32200.0, 3.0], [31800.0, 1.0], [32400.0, 1.0], [33600.0, 1.0], [34800.0, 1.0], [35600.0, 1.0], [47600.0, 6.0], [48000.0, 3.0], [47200.0, 2.0], [52000.0, 1.0], [56800.0, 1.0], [110400.0, 1.0], [686100.0, 1.0], [1325100.0, 1.0], [646400.0, 1.0], [34700.0, 1.0], [35500.0, 1.0], [35900.0, 2.0], [37500.0, 1.0], [40700.0, 1.0], [41500.0, 1.0], [45100.0, 1.0], [47900.0, 2.0], [47500.0, 3.0], [48700.0, 1.0], [51100.0, 1.0], [17300.0, 4.0], [16500.0, 9.0], [16900.0, 10.0], [17100.0, 8.0], [16700.0, 9.0], [17900.0, 10.0], [17500.0, 7.0], [17700.0, 9.0], [18300.0, 10.0], [18100.0, 11.0], [19100.0, 3.0], [18500.0, 8.0], [19300.0, 4.0], [18700.0, 3.0], [18900.0, 3.0], [20100.0, 4.0], [19900.0, 6.0], [19500.0, 2.0], [19700.0, 3.0], [20300.0, 5.0], [20700.0, 2.0], [21500.0, 3.0], [20900.0, 3.0], [20500.0, 3.0], [21300.0, 5.0], [21100.0, 2.0], [21900.0, 6.0], [22300.0, 4.0], [21700.0, 4.0], [22100.0, 2.0], [22500.0, 1.0], [23500.0, 34.0], [22900.0, 4.0], [23100.0, 8.0], [22700.0, 3.0], [23300.0, 25.0], [23700.0, 24.0], [24300.0, 3.0], [23900.0, 19.0], [24500.0, 3.0], [24100.0, 5.0], [24700.0, 4.0], [25300.0, 3.0], [26500.0, 5.0], [25900.0, 5.0], [25700.0, 2.0], [26100.0, 2.0], [26900.0, 2.0], [26700.0, 2.0], [27300.0, 1.0], [27100.0, 2.0], [27700.0, 2.0], [27900.0, 1.0], [28500.0, 3.0], [28100.0, 1.0], [28300.0, 1.0], [28700.0, 3.0], [29300.0, 2.0], [28900.0, 1.0], [30700.0, 2.0], [30300.0, 2.0], [29900.0, 2.0], [30500.0, 7.0], [30900.0, 2.0], [31100.0, 1.0], [31700.0, 1.0], [31300.0, 1.0], [32500.0, 2.0], [32700.0, 1.0], [37000.0, 1.0], [655200.0, 1.0], [47000.0, 1.0], [47800.0, 5.0], [49000.0, 1.0], [47400.0, 3.0], [51000.0, 1.0], [55000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1325100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2202.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 25380.0, "series": [{"data": [[0.0, 5169.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 25380.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 12165.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2202.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.466666666666665, "minX": 1.60318704E12, "maxY": 129.4757225433523, "series": [{"data": [[1.60318752E12, 50.0], [1.60318722E12, 25.0], [1.60318854E12, 83.70054945054936], [1.60318824E12, 53.0], [1.60318794E12, 119.26973684210543], [1.60318884E12, 59.583419689119204], [1.60318764E12, 50.0], [1.60318734E12, 25.0], [1.60318704E12, 7.466666666666665], [1.60318866E12, 60.0], [1.60318908E12, 8.5], [1.60318836E12, 98.59750297265158], [1.60318806E12, 53.0], [1.60318776E12, 68.05063890203505], [1.60318746E12, 50.06054811982145], [1.60318716E12, 25.0], [1.60318878E12, 60.0], [1.60318896E12, 36.0], [1.60318848E12, 128.34975124378116], [1.60318818E12, 53.0], [1.60318788E12, 125.82141414141397], [1.6031889E12, 37.877850162866466], [1.60318758E12, 50.0], [1.60318728E12, 25.0], [1.6031886E12, 60.0], [1.6031883E12, 63.6286571642911], [1.603188E12, 61.081451060917296], [1.6031877E12, 50.0], [1.6031874E12, 37.2426376440461], [1.6031871E12, 23.925112612612594], [1.60318872E12, 60.0], [1.60318902E12, 35.640151515151516], [1.60318842E12, 129.4757225433523], [1.60318812E12, 53.0], [1.60318782E12, 104.17839403973512]], "isOverall": false, "label": "Spike Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318908E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 318.5, "minX": 1.0, "maxY": 1325180.0, "series": [{"data": [[2.0, 1325180.0], [3.0, 327849.5], [4.0, 323659.5], [5.0, 509860.0], [6.0, 215856.66666666666], [7.0, 599185.5], [8.0, 686166.0], [9.0, 123604.42857142857], [10.0, 646354.0], [11.0, 260448.0], [12.0, 535.2], [13.0, 358.0], [14.0, 326.0], [15.0, 318.5], [16.0, 372.0], [18.0, 520.3333333333334], [20.0, 414.0], [21.0, 814.1666666666666], [22.0, 1604.0], [23.0, 649.5], [24.0, 454.5], [25.0, 19197.666666666668], [26.0, 353.0], [27.0, 540.7], [28.0, 333.0], [29.0, 465.5], [30.0, 528.5], [31.0, 377.0], [32.0, 685.0], [33.0, 2981.8], [34.0, 371.5], [35.0, 359.0], [36.0, 997.8571428571429], [37.0, 802.0], [38.0, 1257.25], [39.0, 1861.6153846153848], [40.0, 3904.6666666666665], [41.0, 379.25], [42.0, 513.9], [43.0, 324.6666666666667], [44.0, 2308.0], [45.0, 757.9411764705883], [46.0, 831.3333333333333], [47.0, 528.4], [48.0, 531.125], [49.0, 817.6666666666666], [50.0, 817.25], [51.0, 539.6], [52.0, 437.0], [53.0, 5125.0], [54.0, 574.0869565217392], [55.0, 485.5], [56.0, 515.25], [57.0, 611.1428571428571], [58.0, 368.0], [59.0, 1047.6], [60.0, 768.3749999999999], [61.0, 413.5], [62.0, 1145.25], [63.0, 681.4444444444446], [64.0, 414.6666666666667], [65.0, 955.6666666666667], [66.0, 869.9473684210526], [67.0, 753.5], [68.0, 780.0], [69.0, 881.7272727272726], [70.0, 529.0], [71.0, 555.0], [72.0, 832.0], [73.0, 1570.25], [74.0, 758.3333333333334], [75.0, 1230.2831464379929], [77.0, 6656.0], [78.0, 1403.8], [79.0, 3550.6], [80.0, 2078.0], [81.0, 2894.5], [82.0, 1709.142857142857], [83.0, 2387.3333333333335], [84.0, 2255.0], [86.0, 3871.1000000000004], [87.0, 2622.714285714286], [88.0, 321.0], [89.0, 1957.0], [90.0, 4231.333333333333], [92.0, 3471.6], [94.0, 1621.0714285714287], [93.0, 1775.857142857143], [95.0, 1806.6285714285716], [96.0, 1622.1249999999998], [97.0, 1047.8148148148148], [98.0, 868.5999999999999], [99.0, 1704.7857142857142], [100.0, 1137.4062500000002], [101.0, 652.0], [102.0, 1534.7142857142858], [103.0, 2018.25], [104.0, 1241.2727272727273], [105.0, 1050.6410256410256], [106.0, 1701.3529411764707], [107.0, 1186.1538461538464], [108.0, 1029.838709677419], [109.0, 917.7241379310345], [110.0, 876.4117647058822], [111.0, 798.3199999999997], [112.0, 885.5454545454545], [113.0, 947.0000000000001], [114.0, 1128.0625000000002], [115.0, 1118.0], [116.0, 1283.4411764705883], [117.0, 941.9999999999999], [118.0, 939.0769230769231], [119.0, 1000.2], [120.0, 956.75], [121.0, 835.0833333333334], [122.0, 1525.1999999999996], [123.0, 1228.794117647058], [124.0, 1226.95], [125.0, 1155.3333333333333], [126.0, 1392.2666666666667], [127.0, 1196.2727272727273], [128.0, 1165.4000000000003], [129.0, 1277.5599999999997], [130.0, 1244.6315789473686], [131.0, 1522.933333333333], [132.0, 925.6000000000001], [133.0, 1236.2941176470588], [134.0, 1171.3124999999998], [135.0, 1103.4358974358975], [136.0, 1255.769230769231], [137.0, 1982.6875], [138.0, 1308.074074074074], [139.0, 1456.791666666667], [140.0, 1310.0967741935483], [141.0, 990.0769230769231], [142.0, 1376.7674418604647], [143.0, 2888.0], [144.0, 1032.125], [145.0, 997.1999999999999], [146.0, 2620.0], [147.0, 1326.1136363636365], [148.0, 1541.4000000000003], [149.0, 744.5833333333334], [150.0, 2208.638541348785], [151.0, 1537.410094637223], [152.0, 1400.421052631579], [153.0, 2205.4567901234554], [154.0, 1486.3030303030303], [155.0, 2919.5000000000005], [156.0, 2330.6129032258063], [157.0, 1003.0000000000001], [158.0, 951.9117647058821], [159.0, 1496.125], [160.0, 1247.0222222222221], [161.0, 909.9375000000001], [162.0, 1966.0], [163.0, 1563.0212765957447], [164.0, 7706.333333333334], [165.0, 1655.7222222222222], [166.0, 1457.5217391304345], [167.0, 2269.3636363636365], [168.0, 1355.7272727272727], [169.0, 1392.0], [170.0, 1158.4285714285718], [171.0, 1391.1999999999998], [172.0, 1190.7083333333333], [173.0, 1033.5652173913043], [174.0, 3038.666666666667], [175.0, 1120.4333333333332], [176.0, 897.25], [177.0, 1042.3529411764707], [178.0, 2195.6415094339623], [179.0, 2397.428571428571], [180.0, 3646.857142857143], [181.0, 1987.2857142857142], [182.0, 1374.522727272727], [183.0, 2670.4374999999995], [184.0, 2322.625], [185.0, 1306.2631578947367], [186.0, 1772.3333333333333], [187.0, 1931.5], [188.0, 1289.8500000000001], [189.0, 2164.86], [190.0, 1992.257142857143], [191.0, 2364.8571428571427], [192.0, 2428.6470588235297], [193.0, 1371.8965517241381], [194.0, 1382.8392857142856], [195.0, 2061.4130434782614], [196.0, 1400.4857142857143], [197.0, 1961.7692307692307], [198.0, 2137.9696969696965], [199.0, 3421.20588235294], [200.0, 3735.0000000000005], [201.0, 3148.8], [202.0, 2157.4166666666665], [203.0, 2379.9452240832966], [204.0, 1755.6166666666663], [205.0, 2079.0344827586214], [206.0, 1985.3902439024391], [207.0, 2390.903846153846], [208.0, 3789.8414634146343], [209.0, 3210.753846153845], [210.0, 3367.833333333334], [212.0, 2334.040000000001], [213.0, 2754.3980582524277], [211.0, 3199.9481481481475], [214.0, 2374.917647058823], [215.0, 2206.8000000000006], [216.0, 2286.0967741935488], [217.0, 2388.1428571428573], [218.0, 1775.8194444444443], [219.0, 2224.9523809523807], [220.0, 2225.0000000000005], [221.0, 2572.2916666666674], [222.0, 3482.9821428571418], [223.0, 4162.163636363637], [224.0, 3693.6279069767443], [225.0, 1430.7755102040815], [226.0, 2995.8510638297876], [227.0, 3202.150000000001], [228.0, 2889.384105960265], [229.0, 2318.9210526315774], [230.0, 3170.0549450549447], [231.0, 2469.6516853932576], [232.0, 2429.953488372092], [233.0, 2424.6233766233768], [234.0, 1841.4848484848483], [235.0, 2179.123188405796], [236.0, 1909.4197530864199], [237.0, 2705.0573770491806], [238.0, 1797.7474747474755], [239.0, 2800.822784810127], [240.0, 3249.369230769231], [241.0, 2838.7000000000003], [242.0, 2969.2077922077924], [243.0, 2477.317460317461], [244.0, 3083.3000000000006], [245.0, 1951.5263157894733], [246.0, 1940.8478260869567], [247.0, 2660.313559322035], [248.0, 1825.1071428571431], [249.0, 2796.22], [250.0, 2309.584269662921], [251.0, 2478.188034188034], [252.0, 2532.1068702290086], [253.0, 3233.54716981132], [254.0, 2913.8974358974365], [255.0, 2607.685328185326], [257.0, 2534.744604316544], [256.0, 2683.749571183534], [258.0, 2573.237500000001], [259.0, 3174.544680851064], [260.0, 3305.0422535211264], [261.0, 2607.743801652893], [262.0, 2926.088709677419], [263.0, 2478.0593220338974], [264.0, 1949.9278350515465], [270.0, 2924.4846625766886], [271.0, 2842.232558139538], [268.0, 2661.1275343361626], [269.0, 3200.593272171254], [265.0, 2633.1326530612237], [266.0, 2621.1758241758243], [267.0, 2956.0055248618783], [273.0, 2799.0406504065045], [272.0, 2234.641891891891], [274.0, 3205.2426470588234], [275.0, 3711.9007092198585], [276.0, 2932.597486115168], [277.0, 2805.6606683804625], [278.0, 2204.209821428572], [279.0, 3966.6186046511643], [280.0, 2748.905882352942], [286.0, 3146.894999999999], [287.0, 2722.5775862068963], [284.0, 2990.6833333333348], [285.0, 2120.7807486631023], [281.0, 2868.4550561797755], [282.0, 2341.7089947089944], [283.0, 3077.496402877697], [289.0, 3485.3599999999997], [288.0, 1989.4024390243903], [290.0, 3984.4], [291.0, 2786.141242937851], [292.0, 2937.1994803695284], [293.0, 3405.3333333333326], [294.0, 2654.709844559586], [295.0, 2446.243542435424], [296.0, 2611.353488372092], [302.0, 3399.934065934066], [303.0, 2637.756410256409], [300.0, 1787.4457831325303], [301.0, 3665.1538461538457], [297.0, 2633.643243243244], [298.0, 2652.156028368795], [299.0, 2487.5701754385964], [305.0, 4740.2], [304.0, 3338.489795918367], [306.0, 2883.4146341463415], [307.0, 1992.538461538462], [308.0, 2799.0810810810804], [309.0, 2646.9642857142867], [310.0, 2375.0909090909095], [311.0, 2690.3052631578935], [312.0, 2221.1730769230776], [318.0, 5384.928571428572], [319.0, 6338.862903225804], [316.0, 3817.2812500000005], [317.0, 3203.6363636363644], [313.0, 3781.166666666666], [314.0, 4129.7192982456145], [315.0, 3728.1029411764707], [321.0, 3377.6551724137944], [320.0, 6034.313725490192], [322.0, 3299.8909090909096], [323.0, 2837.923076923077], [324.0, 4285.166666666666], [325.0, 7265.799999999998], [326.0, 5505.189189189189], [327.0, 7017.142857142855], [328.0, 3044.233333333334], [334.0, 5660.765957446811], [332.0, 3695.484637893202], [333.0, 5514.3232758620725], [329.0, 3036.70786516854], [330.0, 3890.432432432431], [331.0, 4167.136363636362], [1.0, 1211723.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[217.78339567192054, 2693.3466916021175]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 334.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.60318704E12, "maxY": 130166.8, "series": [{"data": [[1.60318752E12, 66295.03333333334], [1.60318722E12, 56812.86666666667], [1.60318854E12, 75667.15], [1.60318824E12, 60505.9], [1.60318794E12, 126859.65], [1.60318884E12, 50646.066666666666], [1.60318764E12, 67510.3], [1.60318734E12, 43040.0], [1.60318704E12, 5649.0], [1.60318866E12, 50377.083333333336], [1.60318908E12, 966.0333333333333], [1.60318836E12, 87204.85], [1.60318806E12, 65986.88333333333], [1.60318776E12, 112140.93333333333], [1.60318746E12, 83916.58333333333], [1.60318716E12, 95864.55], [1.60318878E12, 52796.683333333334], [1.60318896E12, 26697.966666666667], [1.60318848E12, 104739.56666666667], [1.60318818E12, 53864.9], [1.60318788E12, 130166.8], [1.6031889E12, 32235.616666666665], [1.60318758E12, 44223.86666666667], [1.60318728E12, 37983.0], [1.6031886E12, 57488.36666666667], [1.6031883E12, 70365.35], [1.603188E12, 77671.81666666667], [1.6031877E12, 105823.6], [1.6031874E12, 83978.96666666666], [1.6031871E12, 95500.13333333333], [1.60318872E12, 53653.78333333333], [1.60318902E12, 27816.783333333333], [1.60318842E12, 90982.63333333333], [1.60318812E12, 56933.566666666666], [1.60318782E12, 127202.28333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60318752E12, 2273.65], [1.60318722E12, 1953.6], [1.60318854E12, 2395.75], [1.60318824E12, 1970.25], [1.60318794E12, 4066.3], [1.60318884E12, 1640.95], [1.60318764E12, 2310.65], [1.60318734E12, 1480.0], [1.60318704E12, 194.25], [1.60318866E12, 1652.05], [1.60318908E12, 0.0], [1.60318836E12, 2771.3], [1.60318806E12, 2216.3], [1.60318776E12, 3751.8], [1.60318746E12, 2856.4], [1.60318716E12, 3294.85], [1.60318878E12, 1694.6], [1.60318896E12, 912.05], [1.60318848E12, 3293.0], [1.60318818E12, 1801.9], [1.60318788E12, 4253.15], [1.6031889E12, 1054.5], [1.60318758E12, 1520.7], [1.60318728E12, 1306.1], [1.6031886E12, 1846.3], [1.6031883E12, 2310.65], [1.603188E12, 2608.5], [1.6031877E12, 3614.9], [1.6031874E12, 2884.15], [1.6031871E12, 3285.6], [1.60318872E12, 1798.2], [1.60318902E12, 915.75], [1.60318842E12, 2969.25], [1.60318812E12, 1951.75], [1.60318782E12, 4181.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318908E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 565.8761904761902, "minX": 1.60318704E12, "maxY": 581003.625, "series": [{"data": [[1.60318752E12, 2537.0972447325726], [1.60318722E12, 1356.0426136363628], [1.60318854E12, 3213.020604395604], [1.60318824E12, 2631.3004329004325], [1.60318794E12, 2964.3425164473647], [1.60318884E12, 2868.462176165803], [1.60318764E12, 2545.6828298887103], [1.60318734E12, 1790.6450000000007], [1.60318704E12, 565.8761904761902], [1.60318866E12, 3091.2366492146602], [1.60318908E12, 581003.625], [1.60318836E12, 3213.2931034482826], [1.60318806E12, 2266.771958098306], [1.60318776E12, 1872.0421202082366], [1.60318746E12, 1777.351179094963], [1.60318716E12, 824.4155916993832], [1.60318878E12, 2951.549603174601], [1.60318896E12, 3072.5421686746977], [1.60318848E12, 3552.742786069647], [1.60318818E12, 2763.662721893493], [1.60318788E12, 2971.1898989899064], [1.6031889E12, 2954.600977198702], [1.60318758E12, 3466.0815085158165], [1.60318728E12, 2248.3470254957538], [1.6031886E12, 2733.5086442220195], [1.6031883E12, 2447.6339084771166], [1.603188E12, 2521.6940451745345], [1.6031877E12, 1528.1595744680865], [1.6031874E12, 1321.3111395646617], [1.6031871E12, 789.5112612612618], [1.60318872E12, 2826.377227722767], [1.60318902E12, 2740.2386363636356], [1.60318842E12, 4311.501156069357], [1.60318812E12, 3008.516037735852], [1.60318782E12, 2444.6630794702082]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60318704E12, "maxY": 3465.0474452554768, "series": [{"data": [[1.60318752E12, 2490.421393841171], [1.60318722E12, 1354.8361742424236], [1.60318854E12, 1415.397664835164], [1.60318824E12, 1454.1203463203483], [1.60318794E12, 1502.0337171052624], [1.60318884E12, 1527.9222797927453], [1.60318764E12, 2457.905405405403], [1.60318734E12, 1789.3312499999997], [1.60318704E12, 564.8952380952378], [1.60318866E12, 2057.653403141364], [1.60318908E12, 0.0], [1.60318836E12, 1545.0755053507728], [1.60318806E12, 1820.2900886381944], [1.60318776E12, 1377.8991954566945], [1.60318746E12, 1575.8444869343557], [1.60318716E12, 811.5989904655062], [1.60318878E12, 1524.9186507936508], [1.60318896E12, 2911.2188755020074], [1.60318848E12, 1663.3238805970136], [1.60318818E12, 2264.4970414201184], [1.60318788E12, 2001.0101010101032], [1.6031889E12, 1745.1058631921828], [1.60318758E12, 3465.0474452554768], [1.60318728E12, 2247.2790368271963], [1.6031886E12, 1415.040036396724], [1.6031883E12, 1546.251312828208], [1.603188E12, 1984.8521560574934], [1.6031877E12, 1403.359675785209], [1.6031874E12, 1296.5019206145955], [1.6031871E12, 788.9268018018024], [1.60318872E12, 2266.5386138613853], [1.60318902E12, 1864.97159090909], [1.60318842E12, 3319.873410404622], [1.60318812E12, 2912.3207547169827], [1.60318782E12, 1589.9288079470182]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 70.14285714285712, "minX": 1.60318704E12, "maxY": 581003.4375, "series": [{"data": [[1.60318752E12, 245.84521880064798], [1.60318722E12, 115.75662878787881], [1.60318854E12, 2810.5425824175795], [1.60318824E12, 2086.8865800865806], [1.60318794E12, 2576.6097861842186], [1.60318884E12, 2335.821761658029], [1.60318764E12, 401.47933227344964], [1.60318734E12, 82.13250000000001], [1.60318704E12, 70.14285714285712], [1.60318866E12, 1736.1958115183227], [1.60318908E12, 581003.4375], [1.60318836E12, 2722.7853745541], [1.60318806E12, 1029.0000000000014], [1.60318776E12, 1423.5683861807852], [1.60318746E12, 602.0350541746338], [1.60318716E12, 328.35277621985404], [1.60318878E12, 2320.5456349206393], [1.60318896E12, 677.9156626506028], [1.60318848E12, 2847.868656716412], [1.60318818E12, 1255.9280078895456], [1.60318788E12, 1761.5240404040408], [1.6031889E12, 1920.0993485342049], [1.60318758E12, 74.77980535279814], [1.60318728E12, 105.72521246458922], [1.6031886E12, 2317.337579617834], [1.6031883E12, 1863.4891222805718], [1.603188E12, 978.2840520191647], [1.6031877E12, 631.4229989868282], [1.6031874E12, 426.3886043533923], [1.6031871E12, 257.85135135135164], [1.60318872E12, 1249.400990099008], [1.60318902E12, 1655.7727272727273], [1.60318842E12, 1970.1242774566474], [1.60318812E12, 464.54433962264187], [1.60318782E12, 1783.7988410596029]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 273.0, "minX": 1.60318704E12, "maxY": 45106.0, "series": [{"data": [[1.60318752E12, 28704.0], [1.60318722E12, 14295.0], [1.60318854E12, 28220.0], [1.60318824E12, 10172.0], [1.60318794E12, 13567.0], [1.60318884E12, 32480.0], [1.60318764E12, 35965.0], [1.60318734E12, 15760.0], [1.60318704E12, 4440.0], [1.60318866E12, 30261.0], [1.60318836E12, 11870.0], [1.60318806E12, 29944.0], [1.60318776E12, 14207.0], [1.60318746E12, 26542.0], [1.60318716E12, 9679.0], [1.60318878E12, 31427.0], [1.60318896E12, 30598.0], [1.60318848E12, 15267.0], [1.60318818E12, 22965.0], [1.60318788E12, 45106.0], [1.6031889E12, 22324.0], [1.60318758E12, 36942.0], [1.60318728E12, 21970.0], [1.6031886E12, 8901.0], [1.6031883E12, 16866.0], [1.603188E12, 18317.0], [1.6031877E12, 17229.0], [1.6031874E12, 15774.0], [1.6031871E12, 7988.0], [1.60318872E12, 37524.0], [1.60318902E12, 18904.0], [1.60318842E12, 34517.0], [1.60318812E12, 24632.0], [1.60318782E12, 16084.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60318752E12, 297.06999970674514], [1.60318722E12, 297.05199899196623], [1.60318854E12, 476.9919990730286], [1.60318824E12, 516.7819992375374], [1.60318794E12, 555.2829931843281], [1.60318884E12, 439.9279980945587], [1.60318764E12, 295.0], [1.60318734E12, 285.0], [1.60318704E12, 284.0], [1.60318866E12, 411.82799616336825], [1.60318836E12, 569.6759957170486], [1.60318806E12, 327.3729991424084], [1.60318776E12, 419.13199419498443], [1.60318746E12, 295.0], [1.60318716E12, 343.08699872612954], [1.60318878E12, 539.3129954087734], [1.60318896E12, 342.2439983510971], [1.60318848E12, 582.0869987261295], [1.60318818E12, 321.7749997675419], [1.60318788E12, 314.0], [1.6031889E12, 475.6409974133968], [1.60318758E12, 288.0], [1.60318728E12, 286.36299983143806], [1.6031886E12, 614.9279980945587], [1.6031883E12, 514.4999958276749], [1.603188E12, 373.6989996635914], [1.6031877E12, 365.59499953389167], [1.6031874E12, 291.039999628067], [1.6031871E12, 307.9839995765686], [1.60318872E12, 463.51399953603743], [1.60318902E12, 445.9919966888428], [1.60318842E12, 333.4539996170998], [1.60318812E12, 293.0], [1.60318782E12, 547.3959978437424]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60318752E12, 298.35400023460386], [1.60318722E12, 299.46430010080337], [1.60318854E12, 481.32160049438477], [1.60318824E12, 519.1068002033234], [1.60318794E12, 560.0], [1.60318884E12, 441.58240016937253], [1.60318764E12, 295.3750001192093], [1.60318734E12, 285.0], [1.60318704E12, 284.0], [1.60318866E12, 426.31080153465274], [1.60318836E12, 599.7887041401863], [1.60318806E12, 328.0], [1.60318776E12, 430.26130058050154], [1.60318746E12, 295.2856001472473], [1.60318716E12, 346.0], [1.60318878E12, 555.6264006996155], [1.60318896E12, 348.46840065956115], [1.60318848E12, 589.4233011889457], [1.60318818E12, 322.0], [1.60318788E12, 315.0], [1.6031889E12, 485.40510103464123], [1.60318758E12, 288.1477000784874], [1.60318728E12, 286.99930006742477], [1.6031886E12, 617.6703002858162], [1.6031883E12, 525.3750001192093], [1.603188E12, 374.96890013456346], [1.6031877E12, 368.0], [1.6031874E12, 292.0], [1.6031871E12, 310.0], [1.60318872E12, 472.22510120630267], [1.60318902E12, 458.4912013244629], [1.60318842E12, 334.8994001531601], [1.60318812E12, 293.454400100708], [1.60318782E12, 553.9195010781289]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60318752E12, 297.6849998533726], [1.60318722E12, 299.0414998739958], [1.60318854E12, 479.24799938201903], [1.60318824E12, 518.2539997458458], [1.60318794E12, 559.7809994757175], [1.60318884E12, 440.8719997882843], [1.60318764E12, 295.0], [1.60318734E12, 285.0], [1.60318704E12, 284.0], [1.60318866E12, 419.8739980816841], [1.60318836E12, 582.4234948247671], [1.60318806E12, 328.0], [1.60318776E12, 428.5509995162487], [1.60318746E12, 295.0], [1.60318716E12, 345.75849936306474], [1.60318878E12, 548.9414977043867], [1.60318896E12, 345.70199917554856], [1.60318848E12, 584.7584993630647], [1.60318818E12, 322.0], [1.60318788E12, 314.84999972581863], [1.6031889E12, 481.0654987066984], [1.60318758E12, 288.0], [1.60318728E12, 286.71649991571906], [1.6031886E12, 616.4714996427298], [1.6031883E12, 523.2499979138374], [1.603188E12, 374.4044998317957], [1.6031877E12, 367.1449995338917], [1.6031874E12, 291.8199998140335], [1.6031871E12, 309.7439995765686], [1.60318872E12, 467.1654984921217], [1.60318902E12, 452.93599834442136], [1.60318842E12, 334.2569998085499], [1.60318812E12, 293.031999874115], [1.60318782E12, 550.9589994609356]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60318752E12, 282.0], [1.60318722E12, 275.0], [1.60318854E12, 416.0], [1.60318824E12, 335.0], [1.60318794E12, 368.0], [1.60318884E12, 318.0], [1.60318764E12, 281.0], [1.60318734E12, 274.0], [1.60318704E12, 284.0], [1.60318866E12, 331.0], [1.60318836E12, 346.0], [1.60318806E12, 285.0], [1.60318776E12, 302.0], [1.60318746E12, 282.0], [1.60318716E12, 308.0], [1.60318878E12, 440.0], [1.60318896E12, 312.0], [1.60318848E12, 341.0], [1.60318818E12, 288.0], [1.60318788E12, 291.0], [1.6031889E12, 376.0], [1.60318758E12, 276.0], [1.60318728E12, 280.0], [1.6031886E12, 513.0], [1.6031883E12, 416.0], [1.603188E12, 331.0], [1.6031877E12, 328.0], [1.6031874E12, 273.0], [1.6031871E12, 290.0], [1.60318872E12, 378.0], [1.60318902E12, 342.0], [1.60318842E12, 289.0], [1.60318812E12, 286.0], [1.60318782E12, 466.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60318752E12, 665.0], [1.60318722E12, 503.0], [1.60318854E12, 1100.0], [1.60318824E12, 1084.0], [1.60318794E12, 1079.5], [1.60318884E12, 1074.0], [1.60318764E12, 744.0], [1.60318734E12, 377.5], [1.60318704E12, 395.0], [1.60318866E12, 1096.0], [1.60318836E12, 1078.5], [1.60318806E12, 1104.0], [1.60318776E12, 960.0], [1.60318746E12, 847.0], [1.60318716E12, 683.0], [1.60318878E12, 1138.5], [1.60318896E12, 1157.0], [1.60318848E12, 1219.0], [1.60318818E12, 1117.0], [1.60318788E12, 953.0], [1.6031889E12, 1016.0], [1.60318758E12, 493.5], [1.60318728E12, 516.0], [1.6031886E12, 1089.5], [1.6031883E12, 1084.0], [1.603188E12, 968.5], [1.6031877E12, 834.0], [1.6031874E12, 826.0], [1.6031871E12, 638.0], [1.60318872E12, 1120.0], [1.60318902E12, 1076.0], [1.60318842E12, 1320.0], [1.60318812E12, 863.0], [1.60318782E12, 1131.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318902E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 496.0, "minX": 1.0, "maxY": 23978.5, "series": [{"data": [[2.0, 3358.0], [3.0, 1353.5], [4.0, 882.0], [5.0, 1053.5], [6.0, 979.5], [7.0, 1039.0], [8.0, 861.0], [9.0, 953.0], [10.0, 949.0], [11.0, 993.0], [12.0, 929.5], [13.0, 906.0], [14.0, 963.0], [15.0, 1045.0], [16.0, 1073.0], [17.0, 970.5], [18.0, 969.0], [19.0, 1014.0], [20.0, 971.5], [21.0, 926.0], [22.0, 954.5], [23.0, 924.0], [24.0, 942.0], [25.0, 918.0], [26.0, 948.0], [27.0, 919.0], [28.0, 935.5], [29.0, 887.0], [30.0, 905.0], [31.0, 894.0], [32.0, 897.5], [33.0, 943.0], [34.0, 994.0], [35.0, 876.0], [37.0, 885.0], [36.0, 879.0], [38.0, 946.0], [39.0, 945.0], [40.0, 1052.5], [41.0, 935.0], [42.0, 1018.0], [43.0, 1026.0], [45.0, 1069.0], [44.0, 1120.5], [46.0, 1055.0], [47.0, 1126.0], [48.0, 855.0], [49.0, 1049.0], [50.0, 975.0], [51.0, 1257.0], [52.0, 825.0], [53.0, 890.0], [54.0, 1087.0], [56.0, 1307.0], [57.0, 881.5], [58.0, 496.0], [62.0, 1268.0], [1.0, 6158.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 11277.0], [4.0, 11523.0], [6.0, 12143.0], [7.0, 11339.0], [8.0, 23978.5], [9.0, 12330.0], [10.0, 11465.0], [11.0, 18314.5], [12.0, 11316.0], [13.0, 11560.5], [14.0, 11520.0], [15.0, 11561.0], [16.0, 11776.0], [17.0, 12093.0], [18.0, 11662.0], [19.0, 11592.5], [20.0, 11859.5], [21.0, 11638.0], [22.0, 11375.5], [23.0, 11695.5], [24.0, 11345.0], [25.0, 11475.5], [26.0, 11636.5], [27.0, 11513.0], [28.0, 11709.0], [29.0, 11469.0], [30.0, 11436.5], [31.0, 11465.0], [33.0, 11823.0], [32.0, 11288.0], [34.0, 11618.5], [35.0, 11537.0], [37.0, 11503.0], [36.0, 11580.5], [38.0, 11724.0], [39.0, 11421.0], [41.0, 11873.0], [40.0, 11553.0], [43.0, 11357.5], [42.0, 11532.0], [45.0, 11417.0], [44.0, 11310.0], [46.0, 11729.0], [47.0, 12225.5], [48.0, 11223.5], [49.0, 11272.0], [50.0, 11475.0], [51.0, 20090.0], [52.0, 11977.0], [53.0, 11681.0], [54.0, 11105.0], [56.0, 11395.5], [57.0, 11284.0], [58.0, 11227.0], [62.0, 11610.0], [1.0, 23612.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 62.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 6154.5, "series": [{"data": [[2.0, 3358.0], [3.0, 1352.5], [4.0, 882.0], [5.0, 1053.0], [6.0, 977.5], [7.0, 1039.0], [8.0, 860.5], [9.0, 953.0], [10.0, 949.0], [11.0, 993.0], [12.0, 929.0], [13.0, 906.0], [14.0, 962.0], [15.0, 1041.0], [16.0, 1073.0], [17.0, 970.5], [18.0, 968.0], [19.0, 1013.0], [20.0, 970.5], [21.0, 926.0], [22.0, 954.5], [23.0, 924.0], [24.0, 942.0], [25.0, 918.0], [26.0, 948.0], [27.0, 916.0], [28.0, 935.5], [29.0, 886.5], [30.0, 905.0], [31.0, 894.0], [32.0, 897.0], [33.0, 942.0], [34.0, 994.0], [35.0, 876.0], [37.0, 885.0], [36.0, 878.0], [38.0, 945.5], [39.0, 943.0], [40.0, 1051.5], [41.0, 934.0], [42.0, 1018.0], [43.0, 1026.0], [45.0, 1069.0], [44.0, 1120.5], [46.0, 1055.0], [47.0, 1126.0], [48.0, 854.5], [49.0, 1048.5], [50.0, 975.0], [51.0, 1257.0], [52.0, 823.0], [53.0, 890.0], [54.0, 1087.0], [56.0, 1307.0], [57.0, 881.5], [58.0, 496.0], [62.0, 1268.0], [1.0, 6154.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [4.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [33.0, 0.0], [32.0, 0.0], [34.0, 0.0], [35.0, 0.0], [37.0, 0.0], [36.0, 0.0], [38.0, 0.0], [39.0, 0.0], [41.0, 0.0], [40.0, 0.0], [43.0, 0.0], [42.0, 0.0], [45.0, 0.0], [44.0, 0.0], [46.0, 0.0], [47.0, 0.0], [48.0, 0.0], [49.0, 0.0], [50.0, 0.0], [51.0, 0.0], [52.0, 0.0], [53.0, 0.0], [54.0, 0.0], [56.0, 0.0], [57.0, 0.0], [58.0, 0.0], [62.0, 0.0], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 62.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.95, "minX": 1.60318704E12, "maxY": 41.333333333333336, "series": [{"data": [[1.60318752E12, 20.566666666666666], [1.60318722E12, 17.6], [1.60318854E12, 23.333333333333332], [1.60318824E12, 19.25], [1.60318794E12, 39.86666666666667], [1.60318884E12, 15.9], [1.60318764E12, 20.966666666666665], [1.60318734E12, 13.333333333333334], [1.60318704E12, 1.95], [1.60318866E12, 15.916666666666666], [1.60318836E12, 28.65], [1.60318806E12, 20.683333333333334], [1.60318776E12, 35.81666666666667], [1.60318746E12, 26.166666666666668], [1.60318716E12, 29.716666666666665], [1.60318878E12, 16.8], [1.60318896E12, 8.3], [1.60318848E12, 33.266666666666666], [1.60318818E12, 16.9], [1.60318788E12, 41.333333333333336], [1.6031889E12, 10.016666666666667], [1.60318758E12, 13.7], [1.60318728E12, 11.766666666666667], [1.6031886E12, 18.316666666666666], [1.6031883E12, 22.683333333333334], [1.603188E12, 23.8], [1.6031877E12, 32.9], [1.6031874E12, 26.433333333333334], [1.6031871E12, 29.816666666666666], [1.60318872E12, 16.833333333333332], [1.60318902E12, 8.466666666666667], [1.60318842E12, 29.033333333333335], [1.60318812E12, 17.666666666666668], [1.60318782E12, 40.85]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318902E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60318704E12, "maxY": 38.31666666666667, "series": [{"data": [[1.60318848E12, 0.4666666666666667], [1.60318818E12, 0.03333333333333333], [1.60318788E12, 0.16666666666666666], [1.6031889E12, 0.016666666666666666], [1.60318854E12, 0.18333333333333332], [1.60318824E12, 0.03333333333333333], [1.60318794E12, 0.21666666666666667], [1.60318884E12, 0.1], [1.6031886E12, 0.13333333333333333], [1.6031883E12, 0.11666666666666667], [1.603188E12, 0.016666666666666666], [1.60318866E12, 0.08333333333333333], [1.60318908E12, 0.18333333333333332], [1.60318836E12, 0.11666666666666667], [1.60318806E12, 0.016666666666666666], [1.60318872E12, 0.016666666666666666], [1.60318776E12, 0.03333333333333333], [1.60318902E12, 0.016666666666666666], [1.60318842E12, 0.13333333333333333], [1.60318782E12, 0.08333333333333333], [1.60318878E12, 0.15]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.60318752E12, 20.483333333333334], [1.60318722E12, 17.6], [1.60318854E12, 21.583333333333332], [1.60318824E12, 17.75], [1.60318794E12, 36.63333333333333], [1.60318884E12, 14.783333333333333], [1.60318764E12, 20.816666666666666], [1.60318734E12, 13.333333333333334], [1.60318704E12, 1.75], [1.60318866E12, 14.883333333333333], [1.60318836E12, 24.933333333333334], [1.60318806E12, 19.966666666666665], [1.60318776E12, 33.8], [1.60318746E12, 25.716666666666665], [1.60318716E12, 29.666666666666668], [1.60318878E12, 15.266666666666667], [1.60318896E12, 8.216666666666667], [1.60318848E12, 29.666666666666668], [1.60318818E12, 16.233333333333334], [1.60318788E12, 38.31666666666667], [1.6031889E12, 9.5], [1.60318758E12, 13.7], [1.60318728E12, 11.766666666666667], [1.6031886E12, 16.633333333333333], [1.6031883E12, 20.816666666666666], [1.603188E12, 23.5], [1.6031877E12, 32.56666666666667], [1.6031874E12, 25.983333333333334], [1.6031871E12, 29.583333333333332], [1.60318872E12, 16.2], [1.60318902E12, 8.25], [1.60318842E12, 26.75], [1.60318812E12, 17.583333333333332], [1.60318782E12, 37.666666666666664]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.60318836E12, 0.03333333333333333], [1.60318746E12, 0.016666666666666666], [1.60318716E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.6031871E12, 0.016666666666666666]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.60318752E12, 0.08333333333333333], [1.60318854E12, 2.5], [1.60318824E12, 1.4666666666666666], [1.60318794E12, 3.683333333333333], [1.60318884E12, 1.2], [1.60318764E12, 0.15], [1.60318866E12, 0.95], [1.60318908E12, 0.08333333333333333], [1.60318836E12, 2.95], [1.60318806E12, 0.7], [1.60318776E12, 1.3833333333333333], [1.60318746E12, 0.4166666666666667], [1.60318716E12, 0.03333333333333333], [1.60318878E12, 1.3833333333333333], [1.60318896E12, 0.08333333333333333], [1.60318848E12, 3.3666666666666667], [1.60318818E12, 0.6333333333333333], [1.60318788E12, 2.7666666666666666], [1.6031889E12, 0.7166666666666667], [1.6031886E12, 1.55], [1.6031883E12, 1.2833333333333334], [1.603188E12, 0.8333333333333334], [1.6031877E12, 0.3333333333333333], [1.6031874E12, 0.05], [1.60318872E12, 0.6166666666666667], [1.60318902E12, 0.5333333333333333], [1.60318842E12, 1.95], [1.60318812E12, 0.08333333333333333], [1.60318782E12, 2.5166666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318908E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60318704E12, "maxY": 38.31666666666667, "series": [{"data": [[1.60318752E12, 20.483333333333334], [1.60318722E12, 17.6], [1.60318854E12, 21.583333333333332], [1.60318824E12, 17.75], [1.60318794E12, 36.63333333333333], [1.60318884E12, 14.783333333333333], [1.60318764E12, 20.816666666666666], [1.60318734E12, 13.333333333333334], [1.60318704E12, 1.75], [1.60318866E12, 14.883333333333333], [1.60318836E12, 24.933333333333334], [1.60318806E12, 19.966666666666665], [1.60318776E12, 33.8], [1.60318746E12, 25.716666666666665], [1.60318716E12, 29.666666666666668], [1.60318878E12, 15.266666666666667], [1.60318896E12, 8.216666666666667], [1.60318848E12, 29.666666666666668], [1.60318818E12, 16.233333333333334], [1.60318788E12, 38.31666666666667], [1.6031889E12, 9.5], [1.60318758E12, 13.7], [1.60318728E12, 11.766666666666667], [1.6031886E12, 16.633333333333333], [1.6031883E12, 20.816666666666666], [1.603188E12, 23.5], [1.6031877E12, 32.56666666666667], [1.6031874E12, 25.983333333333334], [1.6031871E12, 29.583333333333332], [1.60318872E12, 16.2], [1.60318902E12, 8.25], [1.60318842E12, 26.75], [1.60318812E12, 17.583333333333332], [1.60318782E12, 37.666666666666664]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.60318752E12, 0.08333333333333333], [1.60318854E12, 2.683333333333333], [1.60318824E12, 1.5], [1.60318794E12, 3.9], [1.60318884E12, 1.3], [1.60318764E12, 0.15], [1.60318866E12, 1.0333333333333334], [1.60318908E12, 0.26666666666666666], [1.60318836E12, 3.1], [1.60318806E12, 0.7166666666666667], [1.60318776E12, 1.4166666666666667], [1.60318746E12, 0.43333333333333335], [1.60318716E12, 0.05], [1.60318878E12, 1.5333333333333334], [1.60318896E12, 0.08333333333333333], [1.60318848E12, 3.8333333333333335], [1.60318818E12, 0.6666666666666666], [1.60318788E12, 2.933333333333333], [1.6031889E12, 0.7333333333333333], [1.6031886E12, 1.6833333333333333], [1.6031883E12, 1.4], [1.603188E12, 0.85], [1.6031877E12, 0.3333333333333333], [1.6031874E12, 0.05], [1.6031871E12, 0.016666666666666666], [1.60318872E12, 0.6333333333333333], [1.60318902E12, 0.55], [1.60318842E12, 2.0833333333333335], [1.60318812E12, 0.08333333333333333], [1.60318782E12, 2.6]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60318704E12, "maxY": 38.31666666666667, "series": [{"data": [[1.60318752E12, 20.483333333333334], [1.60318722E12, 17.6], [1.60318854E12, 21.583333333333332], [1.60318824E12, 17.75], [1.60318794E12, 36.63333333333333], [1.60318884E12, 14.783333333333333], [1.60318764E12, 20.816666666666666], [1.60318734E12, 13.333333333333334], [1.60318704E12, 1.75], [1.60318866E12, 14.883333333333333], [1.60318836E12, 24.933333333333334], [1.60318806E12, 19.966666666666665], [1.60318776E12, 33.8], [1.60318746E12, 25.716666666666665], [1.60318716E12, 29.666666666666668], [1.60318878E12, 15.266666666666667], [1.60318896E12, 8.216666666666667], [1.60318848E12, 29.666666666666668], [1.60318818E12, 16.233333333333334], [1.60318788E12, 38.31666666666667], [1.6031889E12, 9.5], [1.60318758E12, 13.7], [1.60318728E12, 11.766666666666667], [1.6031886E12, 16.633333333333333], [1.6031883E12, 20.816666666666666], [1.603188E12, 23.5], [1.6031877E12, 32.56666666666667], [1.6031874E12, 25.983333333333334], [1.6031871E12, 29.583333333333332], [1.60318872E12, 16.2], [1.60318902E12, 8.25], [1.60318842E12, 26.75], [1.60318812E12, 17.583333333333332], [1.60318782E12, 37.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60318752E12, 0.08333333333333333], [1.60318854E12, 2.683333333333333], [1.60318824E12, 1.5], [1.60318794E12, 3.9], [1.60318884E12, 1.3], [1.60318764E12, 0.15], [1.60318866E12, 1.0333333333333334], [1.60318908E12, 0.26666666666666666], [1.60318836E12, 3.1], [1.60318806E12, 0.7166666666666667], [1.60318776E12, 1.4166666666666667], [1.60318746E12, 0.43333333333333335], [1.60318716E12, 0.05], [1.60318878E12, 1.5333333333333334], [1.60318896E12, 0.08333333333333333], [1.60318848E12, 3.8333333333333335], [1.60318818E12, 0.6666666666666666], [1.60318788E12, 2.933333333333333], [1.6031889E12, 0.7333333333333333], [1.6031886E12, 1.6833333333333333], [1.6031883E12, 1.4], [1.603188E12, 0.85], [1.6031877E12, 0.3333333333333333], [1.6031874E12, 0.05], [1.6031871E12, 0.016666666666666666], [1.60318872E12, 0.6333333333333333], [1.60318902E12, 0.55], [1.60318842E12, 2.0833333333333335], [1.60318812E12, 0.08333333333333333], [1.60318782E12, 2.6]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

