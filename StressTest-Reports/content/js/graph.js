/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 277.0, "minX": 0.0, "maxY": 1325196.0, "series": [{"data": [[0.0, 277.0], [0.1, 289.0], [0.2, 293.0], [0.3, 296.0], [0.4, 298.0], [0.5, 300.0], [0.6, 302.0], [0.7, 304.0], [0.8, 306.0], [0.9, 308.0], [1.0, 309.0], [1.1, 311.0], [1.2, 313.0], [1.3, 315.0], [1.4, 317.0], [1.5, 318.0], [1.6, 320.0], [1.7, 322.0], [1.8, 324.0], [1.9, 326.0], [2.0, 328.0], [2.1, 329.0], [2.2, 331.0], [2.3, 333.0], [2.4, 335.0], [2.5, 337.0], [2.6, 339.0], [2.7, 341.0], [2.8, 343.0], [2.9, 346.0], [3.0, 348.0], [3.1, 351.0], [3.2, 353.0], [3.3, 356.0], [3.4, 358.0], [3.5, 360.0], [3.6, 363.0], [3.7, 365.0], [3.8, 368.0], [3.9, 370.0], [4.0, 373.0], [4.1, 375.0], [4.2, 377.0], [4.3, 379.0], [4.4, 382.0], [4.5, 385.0], [4.6, 387.0], [4.7, 389.0], [4.8, 392.0], [4.9, 394.0], [5.0, 396.0], [5.1, 399.0], [5.2, 402.0], [5.3, 404.0], [5.4, 407.0], [5.5, 410.0], [5.6, 413.0], [5.7, 415.0], [5.8, 417.0], [5.9, 421.0], [6.0, 424.0], [6.1, 427.0], [6.2, 429.0], [6.3, 432.0], [6.4, 434.0], [6.5, 437.0], [6.6, 440.0], [6.7, 443.0], [6.8, 445.0], [6.9, 448.0], [7.0, 450.0], [7.1, 453.0], [7.2, 455.0], [7.3, 458.0], [7.4, 461.0], [7.5, 463.0], [7.6, 465.0], [7.7, 468.0], [7.8, 470.0], [7.9, 473.0], [8.0, 475.0], [8.1, 478.0], [8.2, 479.0], [8.3, 482.0], [8.4, 484.0], [8.5, 486.0], [8.6, 488.0], [8.7, 491.0], [8.8, 493.0], [8.9, 496.0], [9.0, 498.0], [9.1, 500.0], [9.2, 503.0], [9.3, 505.0], [9.4, 508.0], [9.5, 510.0], [9.6, 512.0], [9.7, 514.0], [9.8, 516.0], [9.9, 518.0], [10.0, 520.0], [10.1, 522.0], [10.2, 525.0], [10.3, 527.0], [10.4, 529.0], [10.5, 531.0], [10.6, 533.0], [10.7, 535.0], [10.8, 537.0], [10.9, 539.0], [11.0, 541.0], [11.1, 543.0], [11.2, 546.0], [11.3, 547.0], [11.4, 550.0], [11.5, 552.0], [11.6, 554.0], [11.7, 556.0], [11.8, 557.0], [11.9, 559.0], [12.0, 561.0], [12.1, 563.0], [12.2, 565.0], [12.3, 567.0], [12.4, 569.0], [12.5, 570.0], [12.6, 572.0], [12.7, 574.0], [12.8, 576.0], [12.9, 577.0], [13.0, 579.0], [13.1, 581.0], [13.2, 583.0], [13.3, 585.0], [13.4, 586.0], [13.5, 588.0], [13.6, 590.0], [13.7, 591.0], [13.8, 594.0], [13.9, 595.0], [14.0, 597.0], [14.1, 599.0], [14.2, 600.0], [14.3, 602.0], [14.4, 604.0], [14.5, 605.0], [14.6, 607.0], [14.7, 608.0], [14.8, 610.0], [14.9, 611.0], [15.0, 613.0], [15.1, 615.0], [15.2, 616.0], [15.3, 617.0], [15.4, 619.0], [15.5, 620.0], [15.6, 622.0], [15.7, 623.0], [15.8, 624.0], [15.9, 626.0], [16.0, 628.0], [16.1, 629.0], [16.2, 630.0], [16.3, 632.0], [16.4, 633.0], [16.5, 635.0], [16.6, 636.0], [16.7, 637.0], [16.8, 638.0], [16.9, 640.0], [17.0, 641.0], [17.1, 643.0], [17.2, 645.0], [17.3, 646.0], [17.4, 647.0], [17.5, 649.0], [17.6, 650.0], [17.7, 652.0], [17.8, 653.0], [17.9, 654.0], [18.0, 656.0], [18.1, 658.0], [18.2, 659.0], [18.3, 660.0], [18.4, 662.0], [18.5, 663.0], [18.6, 665.0], [18.7, 666.0], [18.8, 667.0], [18.9, 668.0], [19.0, 669.0], [19.1, 670.0], [19.2, 672.0], [19.3, 673.0], [19.4, 675.0], [19.5, 676.0], [19.6, 677.0], [19.7, 678.0], [19.8, 680.0], [19.9, 681.0], [20.0, 682.0], [20.1, 683.0], [20.2, 684.0], [20.3, 685.0], [20.4, 686.0], [20.5, 688.0], [20.6, 689.0], [20.7, 690.0], [20.8, 691.0], [20.9, 692.0], [21.0, 693.0], [21.1, 694.0], [21.2, 695.0], [21.3, 696.0], [21.4, 698.0], [21.5, 699.0], [21.6, 700.0], [21.7, 701.0], [21.8, 702.0], [21.9, 703.0], [22.0, 704.0], [22.1, 705.0], [22.2, 707.0], [22.3, 708.0], [22.4, 709.0], [22.5, 710.0], [22.6, 711.0], [22.7, 712.0], [22.8, 713.0], [22.9, 714.0], [23.0, 715.0], [23.1, 716.0], [23.2, 717.0], [23.3, 719.0], [23.4, 720.0], [23.5, 721.0], [23.6, 722.0], [23.7, 723.0], [23.8, 724.0], [23.9, 725.0], [24.0, 726.0], [24.1, 728.0], [24.2, 728.0], [24.3, 729.0], [24.4, 731.0], [24.5, 732.0], [24.6, 733.0], [24.7, 734.0], [24.8, 735.0], [24.9, 736.0], [25.0, 737.0], [25.1, 738.0], [25.2, 739.0], [25.3, 740.0], [25.4, 741.0], [25.5, 742.0], [25.6, 743.0], [25.7, 743.0], [25.8, 744.0], [25.9, 745.0], [26.0, 746.0], [26.1, 747.0], [26.2, 749.0], [26.3, 750.0], [26.4, 751.0], [26.5, 752.0], [26.6, 752.0], [26.7, 754.0], [26.8, 754.0], [26.9, 755.0], [27.0, 757.0], [27.1, 758.0], [27.2, 759.0], [27.3, 760.0], [27.4, 761.0], [27.5, 762.0], [27.6, 763.0], [27.7, 764.0], [27.8, 765.0], [27.9, 766.0], [28.0, 767.0], [28.1, 768.0], [28.2, 769.0], [28.3, 770.0], [28.4, 771.0], [28.5, 772.0], [28.6, 773.0], [28.7, 774.0], [28.8, 775.0], [28.9, 776.0], [29.0, 777.0], [29.1, 778.0], [29.2, 779.0], [29.3, 780.0], [29.4, 780.0], [29.5, 781.0], [29.6, 782.0], [29.7, 783.0], [29.8, 784.0], [29.9, 785.0], [30.0, 786.0], [30.1, 787.0], [30.2, 788.0], [30.3, 789.0], [30.4, 790.0], [30.5, 791.0], [30.6, 792.0], [30.7, 793.0], [30.8, 794.0], [30.9, 795.0], [31.0, 796.0], [31.1, 797.0], [31.2, 798.0], [31.3, 799.0], [31.4, 800.0], [31.5, 801.0], [31.6, 802.0], [31.7, 803.0], [31.8, 804.0], [31.9, 805.0], [32.0, 806.0], [32.1, 807.0], [32.2, 808.0], [32.3, 809.0], [32.4, 810.0], [32.5, 811.0], [32.6, 812.0], [32.7, 813.0], [32.8, 814.0], [32.9, 815.0], [33.0, 816.0], [33.1, 817.0], [33.2, 818.0], [33.3, 819.0], [33.4, 820.0], [33.5, 821.0], [33.6, 822.0], [33.7, 823.0], [33.8, 824.0], [33.9, 825.0], [34.0, 826.0], [34.1, 827.0], [34.2, 828.0], [34.3, 829.0], [34.4, 831.0], [34.5, 831.0], [34.6, 832.0], [34.7, 834.0], [34.8, 835.0], [34.9, 836.0], [35.0, 837.0], [35.1, 838.0], [35.2, 839.0], [35.3, 840.0], [35.4, 841.0], [35.5, 842.0], [35.6, 843.0], [35.7, 844.0], [35.8, 846.0], [35.9, 847.0], [36.0, 848.0], [36.1, 849.0], [36.2, 850.0], [36.3, 851.0], [36.4, 852.0], [36.5, 853.0], [36.6, 854.0], [36.7, 855.0], [36.8, 856.0], [36.9, 857.0], [37.0, 858.0], [37.1, 859.0], [37.2, 860.0], [37.3, 861.0], [37.4, 863.0], [37.5, 864.0], [37.6, 865.0], [37.7, 866.0], [37.8, 867.0], [37.9, 868.0], [38.0, 869.0], [38.1, 870.0], [38.2, 871.0], [38.3, 872.0], [38.4, 873.0], [38.5, 874.0], [38.6, 875.0], [38.7, 877.0], [38.8, 878.0], [38.9, 878.0], [39.0, 879.0], [39.1, 880.0], [39.2, 882.0], [39.3, 883.0], [39.4, 884.0], [39.5, 885.0], [39.6, 886.0], [39.7, 887.0], [39.8, 889.0], [39.9, 890.0], [40.0, 891.0], [40.1, 892.0], [40.2, 893.0], [40.3, 894.0], [40.4, 896.0], [40.5, 896.0], [40.6, 898.0], [40.7, 899.0], [40.8, 900.0], [40.9, 901.0], [41.0, 902.0], [41.1, 903.0], [41.2, 905.0], [41.3, 906.0], [41.4, 907.0], [41.5, 908.0], [41.6, 909.0], [41.7, 911.0], [41.8, 912.0], [41.9, 913.0], [42.0, 914.0], [42.1, 916.0], [42.2, 917.0], [42.3, 918.0], [42.4, 919.0], [42.5, 921.0], [42.6, 922.0], [42.7, 923.0], [42.8, 924.0], [42.9, 925.0], [43.0, 927.0], [43.1, 928.0], [43.2, 930.0], [43.3, 931.0], [43.4, 932.0], [43.5, 933.0], [43.6, 934.0], [43.7, 936.0], [43.8, 937.0], [43.9, 938.0], [44.0, 940.0], [44.1, 941.0], [44.2, 942.0], [44.3, 944.0], [44.4, 945.0], [44.5, 946.0], [44.6, 947.0], [44.7, 948.0], [44.8, 950.0], [44.9, 952.0], [45.0, 953.0], [45.1, 954.0], [45.2, 956.0], [45.3, 957.0], [45.4, 958.0], [45.5, 960.0], [45.6, 961.0], [45.7, 963.0], [45.8, 964.0], [45.9, 965.0], [46.0, 967.0], [46.1, 968.0], [46.2, 970.0], [46.3, 971.0], [46.4, 973.0], [46.5, 975.0], [46.6, 976.0], [46.7, 977.0], [46.8, 979.0], [46.9, 981.0], [47.0, 982.0], [47.1, 984.0], [47.2, 985.0], [47.3, 987.0], [47.4, 988.0], [47.5, 989.0], [47.6, 991.0], [47.7, 992.0], [47.8, 994.0], [47.9, 995.0], [48.0, 997.0], [48.1, 998.0], [48.2, 999.0], [48.3, 1001.0], [48.4, 1002.0], [48.5, 1004.0], [48.6, 1005.0], [48.7, 1007.0], [48.8, 1009.0], [48.9, 1010.0], [49.0, 1012.0], [49.1, 1013.0], [49.2, 1015.0], [49.3, 1016.0], [49.4, 1018.0], [49.5, 1020.0], [49.6, 1021.0], [49.7, 1023.0], [49.8, 1024.0], [49.9, 1026.0], [50.0, 1028.0], [50.1, 1029.0], [50.2, 1030.0], [50.3, 1032.0], [50.4, 1034.0], [50.5, 1035.0], [50.6, 1037.0], [50.7, 1039.0], [50.8, 1040.0], [50.9, 1042.0], [51.0, 1044.0], [51.1, 1045.0], [51.2, 1047.0], [51.3, 1049.0], [51.4, 1051.0], [51.5, 1053.0], [51.6, 1054.0], [51.7, 1056.0], [51.8, 1058.0], [51.9, 1059.0], [52.0, 1061.0], [52.1, 1063.0], [52.2, 1065.0], [52.3, 1067.0], [52.4, 1068.0], [52.5, 1070.0], [52.6, 1072.0], [52.7, 1074.0], [52.8, 1076.0], [52.9, 1077.0], [53.0, 1079.0], [53.1, 1081.0], [53.2, 1083.0], [53.3, 1085.0], [53.4, 1087.0], [53.5, 1088.0], [53.6, 1090.0], [53.7, 1093.0], [53.8, 1094.0], [53.9, 1096.0], [54.0, 1098.0], [54.1, 1100.0], [54.2, 1102.0], [54.3, 1104.0], [54.4, 1106.0], [54.5, 1108.0], [54.6, 1110.0], [54.7, 1112.0], [54.8, 1114.0], [54.9, 1116.0], [55.0, 1118.0], [55.1, 1120.0], [55.2, 1122.0], [55.3, 1125.0], [55.4, 1127.0], [55.5, 1129.0], [55.6, 1131.0], [55.7, 1133.0], [55.8, 1135.0], [55.9, 1137.0], [56.0, 1139.0], [56.1, 1141.0], [56.2, 1143.0], [56.3, 1145.0], [56.4, 1148.0], [56.5, 1150.0], [56.6, 1152.0], [56.7, 1155.0], [56.8, 1157.0], [56.9, 1159.0], [57.0, 1162.0], [57.1, 1164.0], [57.2, 1166.0], [57.3, 1168.0], [57.4, 1170.0], [57.5, 1173.0], [57.6, 1175.0], [57.7, 1177.0], [57.8, 1179.0], [57.9, 1182.0], [58.0, 1184.0], [58.1, 1187.0], [58.2, 1190.0], [58.3, 1192.0], [58.4, 1195.0], [58.5, 1197.0], [58.6, 1199.0], [58.7, 1202.0], [58.8, 1205.0], [58.9, 1208.0], [59.0, 1210.0], [59.1, 1213.0], [59.2, 1215.0], [59.3, 1218.0], [59.4, 1221.0], [59.5, 1223.0], [59.6, 1226.0], [59.7, 1229.0], [59.8, 1231.0], [59.9, 1234.0], [60.0, 1237.0], [60.1, 1240.0], [60.2, 1243.0], [60.3, 1246.0], [60.4, 1248.0], [60.5, 1251.0], [60.6, 1254.0], [60.7, 1257.0], [60.8, 1260.0], [60.9, 1263.0], [61.0, 1265.0], [61.1, 1269.0], [61.2, 1272.0], [61.3, 1274.0], [61.4, 1277.0], [61.5, 1280.0], [61.6, 1283.0], [61.7, 1287.0], [61.8, 1290.0], [61.9, 1293.0], [62.0, 1296.0], [62.1, 1299.0], [62.2, 1303.0], [62.3, 1305.0], [62.4, 1309.0], [62.5, 1313.0], [62.6, 1316.0], [62.7, 1320.0], [62.8, 1323.0], [62.9, 1328.0], [63.0, 1331.0], [63.1, 1335.0], [63.2, 1340.0], [63.3, 1343.0], [63.4, 1347.0], [63.5, 1351.0], [63.6, 1355.0], [63.7, 1359.0], [63.8, 1363.0], [63.9, 1367.0], [64.0, 1371.0], [64.1, 1375.0], [64.2, 1379.0], [64.3, 1383.0], [64.4, 1388.0], [64.5, 1392.0], [64.6, 1397.0], [64.7, 1401.0], [64.8, 1406.0], [64.9, 1410.0], [65.0, 1414.0], [65.1, 1419.0], [65.2, 1423.0], [65.3, 1428.0], [65.4, 1433.0], [65.5, 1438.0], [65.6, 1443.0], [65.7, 1447.0], [65.8, 1451.0], [65.9, 1456.0], [66.0, 1460.0], [66.1, 1466.0], [66.2, 1471.0], [66.3, 1477.0], [66.4, 1483.0], [66.5, 1487.0], [66.6, 1492.0], [66.7, 1497.0], [66.8, 1501.0], [66.9, 1508.0], [67.0, 1513.0], [67.1, 1519.0], [67.2, 1525.0], [67.3, 1529.0], [67.4, 1536.0], [67.5, 1542.0], [67.6, 1550.0], [67.7, 1556.0], [67.8, 1561.0], [67.9, 1567.0], [68.0, 1573.0], [68.1, 1580.0], [68.2, 1586.0], [68.3, 1594.0], [68.4, 1602.0], [68.5, 1610.0], [68.6, 1616.0], [68.7, 1623.0], [68.8, 1628.0], [68.9, 1635.0], [69.0, 1642.0], [69.1, 1650.0], [69.2, 1656.0], [69.3, 1663.0], [69.4, 1671.0], [69.5, 1677.0], [69.6, 1685.0], [69.7, 1691.0], [69.8, 1698.0], [69.9, 1705.0], [70.0, 1711.0], [70.1, 1718.0], [70.2, 1726.0], [70.3, 1733.0], [70.4, 1739.0], [70.5, 1746.0], [70.6, 1753.0], [70.7, 1760.0], [70.8, 1767.0], [70.9, 1773.0], [71.0, 1779.0], [71.1, 1785.0], [71.2, 1792.0], [71.3, 1797.0], [71.4, 1804.0], [71.5, 1809.0], [71.6, 1817.0], [71.7, 1823.0], [71.8, 1830.0], [71.9, 1838.0], [72.0, 1845.0], [72.1, 1853.0], [72.2, 1861.0], [72.3, 1870.0], [72.4, 1877.0], [72.5, 1884.0], [72.6, 1889.0], [72.7, 1897.0], [72.8, 1904.0], [72.9, 1911.0], [73.0, 1918.0], [73.1, 1925.0], [73.2, 1933.0], [73.3, 1939.0], [73.4, 1946.0], [73.5, 1952.0], [73.6, 1959.0], [73.7, 1965.0], [73.8, 1973.0], [73.9, 1980.0], [74.0, 1986.0], [74.1, 1993.0], [74.2, 2000.0], [74.3, 2007.0], [74.4, 2014.0], [74.5, 2022.0], [74.6, 2029.0], [74.7, 2036.0], [74.8, 2043.0], [74.9, 2050.0], [75.0, 2058.0], [75.1, 2065.0], [75.2, 2074.0], [75.3, 2082.0], [75.4, 2092.0], [75.5, 2100.0], [75.6, 2109.0], [75.7, 2116.0], [75.8, 2125.0], [75.9, 2131.0], [76.0, 2139.0], [76.1, 2146.0], [76.2, 2153.0], [76.3, 2162.0], [76.4, 2169.0], [76.5, 2179.0], [76.6, 2188.0], [76.7, 2200.0], [76.8, 2210.0], [76.9, 2219.0], [77.0, 2227.0], [77.1, 2235.0], [77.2, 2244.0], [77.3, 2253.0], [77.4, 2262.0], [77.5, 2275.0], [77.6, 2282.0], [77.7, 2293.0], [77.8, 2300.0], [77.9, 2309.0], [78.0, 2318.0], [78.1, 2327.0], [78.2, 2339.0], [78.3, 2348.0], [78.4, 2360.0], [78.5, 2368.0], [78.6, 2379.0], [78.7, 2391.0], [78.8, 2403.0], [78.9, 2412.0], [79.0, 2422.0], [79.1, 2433.0], [79.2, 2445.0], [79.3, 2456.0], [79.4, 2466.0], [79.5, 2478.0], [79.6, 2488.0], [79.7, 2497.0], [79.8, 2511.0], [79.9, 2522.0], [80.0, 2534.0], [80.1, 2548.0], [80.2, 2564.0], [80.3, 2576.0], [80.4, 2591.0], [80.5, 2604.0], [80.6, 2619.0], [80.7, 2635.0], [80.8, 2647.0], [80.9, 2660.0], [81.0, 2677.0], [81.1, 2698.0], [81.2, 2716.0], [81.3, 2732.0], [81.4, 2752.0], [81.5, 2777.0], [81.6, 2803.0], [81.7, 2822.0], [81.8, 2848.0], [81.9, 2867.0], [82.0, 2893.0], [82.1, 2917.0], [82.2, 2945.0], [82.3, 2973.0], [82.4, 2998.0], [82.5, 3028.0], [82.6, 3058.0], [82.7, 3088.0], [82.8, 3121.0], [82.9, 3152.0], [83.0, 3188.0], [83.1, 3222.0], [83.2, 3267.0], [83.3, 3301.0], [83.4, 3337.0], [83.5, 3381.0], [83.6, 3429.0], [83.7, 3475.0], [83.8, 3515.0], [83.9, 3555.0], [84.0, 3602.0], [84.1, 3643.0], [84.2, 3691.0], [84.3, 3739.0], [84.4, 3776.0], [84.5, 3828.0], [84.6, 3881.0], [84.7, 3924.0], [84.8, 3979.0], [84.9, 4026.0], [85.0, 4071.0], [85.1, 4112.0], [85.2, 4154.0], [85.3, 4211.0], [85.4, 4271.0], [85.5, 4316.0], [85.6, 4363.0], [85.7, 4410.0], [85.8, 4463.0], [85.9, 4516.0], [86.0, 4593.0], [86.1, 4648.0], [86.2, 4716.0], [86.3, 4770.0], [86.4, 4846.0], [86.5, 4917.0], [86.6, 4972.0], [86.7, 5034.0], [86.8, 5106.0], [86.9, 5188.0], [87.0, 5261.0], [87.1, 5320.0], [87.2, 5393.0], [87.3, 5457.0], [87.4, 5516.0], [87.5, 5588.0], [87.6, 5676.0], [87.7, 5748.0], [87.8, 5809.0], [87.9, 5885.0], [88.0, 5942.0], [88.1, 6001.0], [88.2, 6067.0], [88.3, 6126.0], [88.4, 6181.0], [88.5, 6241.0], [88.6, 6307.0], [88.7, 6362.0], [88.8, 6422.0], [88.9, 6480.0], [89.0, 6532.0], [89.1, 6584.0], [89.2, 6646.0], [89.3, 6707.0], [89.4, 6759.0], [89.5, 6807.0], [89.6, 6860.0], [89.7, 6920.0], [89.8, 6974.0], [89.9, 7044.0], [90.0, 7111.0], [90.1, 7194.0], [90.2, 7271.0], [90.3, 7335.0], [90.4, 7396.0], [90.5, 7454.0], [90.6, 7518.0], [90.7, 7576.0], [90.8, 7652.0], [90.9, 7748.0], [91.0, 7829.0], [91.1, 7916.0], [91.2, 7993.0], [91.3, 8080.0], [91.4, 8165.0], [91.5, 8269.0], [91.6, 8349.0], [91.7, 8466.0], [91.8, 8580.0], [91.9, 8690.0], [92.0, 8827.0], [92.1, 8974.0], [92.2, 9127.0], [92.3, 9298.0], [92.4, 9472.0], [92.5, 9657.0], [92.6, 9846.0], [92.7, 10035.0], [92.8, 10257.0], [92.9, 10478.0], [93.0, 10662.0], [93.1, 10806.0], [93.2, 10887.0], [93.3, 10947.0], [93.4, 10995.0], [93.5, 11028.0], [93.6, 11065.0], [93.7, 11094.0], [93.8, 11118.0], [93.9, 11149.0], [94.0, 11175.0], [94.1, 11196.0], [94.2, 11217.0], [94.3, 11242.0], [94.4, 11261.0], [94.5, 11279.0], [94.6, 11299.0], [94.7, 11316.0], [94.8, 11333.0], [94.9, 11350.0], [95.0, 11369.0], [95.1, 11387.0], [95.2, 11408.0], [95.3, 11434.0], [95.4, 11456.0], [95.5, 11483.0], [95.6, 11504.0], [95.7, 11529.0], [95.8, 11560.0], [95.9, 11591.0], [96.0, 11620.0], [96.1, 11655.0], [96.2, 11705.0], [96.3, 11749.0], [96.4, 11805.0], [96.5, 11880.0], [96.6, 11996.0], [96.7, 12105.0], [96.8, 12214.0], [96.9, 12342.0], [97.0, 12444.0], [97.1, 12597.0], [97.2, 12773.0], [97.3, 12929.0], [97.4, 13112.0], [97.5, 13322.0], [97.6, 13566.0], [97.7, 13832.0], [97.8, 14101.0], [97.9, 14399.0], [98.0, 14785.0], [98.1, 15103.0], [98.2, 15540.0], [98.3, 16071.0], [98.4, 16680.0], [98.5, 17438.0], [98.6, 18019.0], [98.7, 18348.0], [98.8, 19090.0], [98.9, 20079.0], [99.0, 21295.0], [99.1, 22798.0], [99.2, 23358.0], [99.3, 23523.0], [99.4, 23679.0], [99.5, 23825.0], [99.6, 24069.0], [99.7, 25198.0], [99.8, 28189.0], [99.9, 36375.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 6005.0, "series": [{"data": [[873600.0, 1.0], [32900.0, 1.0], [35700.0, 1.0], [37300.0, 1.0], [47700.0, 9.0], [48100.0, 2.0], [47300.0, 4.0], [200.0, 295.0], [51300.0, 1.0], [54100.0, 1.0], [300.0, 2862.0], [400.0, 2413.0], [500.0, 3133.0], [600.0, 4570.0], [700.0, 6005.0], [800.0, 5790.0], [900.0, 4574.0], [1000.0, 3596.0], [1100.0, 2791.0], [1200.0, 2152.0], [1300.0, 1572.0], [1400.0, 1288.0], [1500.0, 988.0], [1600.0, 901.0], [1700.0, 921.0], [1800.0, 871.0], [1900.0, 890.0], [2000.0, 799.0], [2100.0, 741.0], [2300.0, 598.0], [2200.0, 671.0], [2400.0, 583.0], [2500.0, 463.0], [2600.0, 400.0], [2700.0, 288.0], [2800.0, 266.0], [2900.0, 242.0], [3000.0, 196.0], [3100.0, 189.0], [3200.0, 160.0], [3300.0, 153.0], [3400.0, 134.0], [3500.0, 142.0], [3600.0, 136.0], [3700.0, 142.0], [3800.0, 111.0], [3900.0, 137.0], [4000.0, 135.0], [4100.0, 134.0], [4200.0, 104.0], [4300.0, 129.0], [4600.0, 96.0], [4500.0, 87.0], [4400.0, 129.0], [4800.0, 86.0], [4700.0, 104.0], [5000.0, 95.0], [5100.0, 76.0], [4900.0, 95.0], [79300.0, 1.0], [5200.0, 90.0], [5300.0, 92.0], [5500.0, 90.0], [5400.0, 92.0], [5600.0, 78.0], [5700.0, 92.0], [5800.0, 90.0], [6000.0, 103.0], [6100.0, 103.0], [5900.0, 105.0], [6300.0, 102.0], [6200.0, 93.0], [6600.0, 104.0], [6400.0, 115.0], [6500.0, 112.0], [6800.0, 111.0], [6900.0, 108.0], [6700.0, 118.0], [7000.0, 90.0], [7100.0, 76.0], [7400.0, 101.0], [7200.0, 90.0], [7300.0, 95.0], [7600.0, 81.0], [7500.0, 90.0], [7900.0, 76.0], [7800.0, 78.0], [7700.0, 61.0], [8000.0, 75.0], [8100.0, 72.0], [8300.0, 64.0], [8700.0, 49.0], [8500.0, 58.0], [8600.0, 53.0], [8200.0, 63.0], [8400.0, 47.0], [8900.0, 42.0], [9100.0, 42.0], [9200.0, 36.0], [9000.0, 34.0], [8800.0, 41.0], [9600.0, 37.0], [9400.0, 23.0], [9300.0, 44.0], [9500.0, 34.0], [9700.0, 32.0], [10000.0, 34.0], [9900.0, 31.0], [10100.0, 32.0], [10200.0, 26.0], [9800.0, 28.0], [10300.0, 23.0], [10500.0, 37.0], [10700.0, 43.0], [10400.0, 33.0], [10600.0, 29.0], [10900.0, 114.0], [11000.0, 194.0], [11100.0, 237.0], [10800.0, 80.0], [11200.0, 304.0], [11300.0, 335.0], [11400.0, 259.0], [11500.0, 217.0], [11700.0, 124.0], [11600.0, 161.0], [11900.0, 52.0], [11800.0, 82.0], [12100.0, 61.0], [12200.0, 45.0], [12000.0, 57.0], [12400.0, 50.0], [12600.0, 26.0], [12500.0, 43.0], [12700.0, 46.0], [12300.0, 51.0], [12900.0, 41.0], [13300.0, 26.0], [12800.0, 36.0], [13100.0, 30.0], [13000.0, 31.0], [13200.0, 28.0], [13800.0, 30.0], [13600.0, 18.0], [13400.0, 25.0], [13700.0, 25.0], [13500.0, 25.0], [13900.0, 20.0], [14100.0, 23.0], [14200.0, 20.0], [14000.0, 21.0], [14300.0, 19.0], [14800.0, 24.0], [14700.0, 10.0], [14500.0, 19.0], [14400.0, 22.0], [14600.0, 13.0], [14900.0, 21.0], [15000.0, 11.0], [15200.0, 17.0], [15100.0, 10.0], [15300.0, 16.0], [15800.0, 10.0], [15600.0, 7.0], [15400.0, 17.0], [15500.0, 13.0], [15700.0, 8.0], [16000.0, 19.0], [16100.0, 8.0], [15900.0, 15.0], [16300.0, 11.0], [16200.0, 5.0], [17400.0, 7.0], [17200.0, 10.0], [17000.0, 10.0], [16400.0, 17.0], [16600.0, 8.0], [16800.0, 4.0], [18200.0, 20.0], [18400.0, 13.0], [17600.0, 10.0], [17800.0, 12.0], [18000.0, 16.0], [18600.0, 5.0], [19400.0, 4.0], [19000.0, 7.0], [18800.0, 5.0], [19200.0, 4.0], [19800.0, 7.0], [20400.0, 3.0], [19600.0, 12.0], [20200.0, 8.0], [20000.0, 5.0], [21200.0, 7.0], [21000.0, 4.0], [21400.0, 6.0], [20800.0, 3.0], [20600.0, 4.0], [21800.0, 7.0], [21600.0, 9.0], [22200.0, 6.0], [22400.0, 6.0], [22000.0, 3.0], [23200.0, 28.0], [22800.0, 2.0], [23400.0, 45.0], [23000.0, 4.0], [23600.0, 41.0], [24400.0, 4.0], [24200.0, 9.0], [24000.0, 18.0], [23800.0, 36.0], [25400.0, 3.0], [24600.0, 6.0], [25000.0, 3.0], [24800.0, 3.0], [25200.0, 1.0], [26200.0, 2.0], [25800.0, 3.0], [26400.0, 3.0], [26000.0, 4.0], [25600.0, 2.0], [26800.0, 4.0], [27200.0, 2.0], [27600.0, 2.0], [27000.0, 2.0], [27400.0, 1.0], [28600.0, 1.0], [28000.0, 2.0], [27800.0, 1.0], [29400.0, 3.0], [29000.0, 1.0], [28800.0, 1.0], [30400.0, 2.0], [30600.0, 3.0], [30200.0, 2.0], [30000.0, 1.0], [29800.0, 1.0], [30800.0, 2.0], [31000.0, 2.0], [31200.0, 1.0], [32000.0, 1.0], [32200.0, 1.0], [32800.0, 2.0], [34400.0, 1.0], [33600.0, 1.0], [37600.0, 1.0], [47200.0, 2.0], [47600.0, 5.0], [48000.0, 3.0], [54400.0, 1.0], [1325100.0, 1.0], [821000.0, 1.0], [33900.0, 1.0], [36300.0, 2.0], [35900.0, 1.0], [37500.0, 1.0], [39100.0, 1.0], [47500.0, 4.0], [47900.0, 3.0], [48300.0, 1.0], [52300.0, 1.0], [212300.0, 1.0], [54300.0, 1.0], [55100.0, 1.0], [53900.0, 1.0], [621400.0, 1.0], [16700.0, 9.0], [16900.0, 6.0], [17100.0, 12.0], [16500.0, 9.0], [17300.0, 6.0], [18300.0, 19.0], [17500.0, 11.0], [17900.0, 14.0], [18100.0, 19.0], [17700.0, 7.0], [18900.0, 7.0], [18700.0, 6.0], [18500.0, 9.0], [19100.0, 9.0], [19300.0, 10.0], [19900.0, 5.0], [20100.0, 7.0], [19700.0, 3.0], [20300.0, 6.0], [19500.0, 3.0], [21100.0, 5.0], [20500.0, 3.0], [21300.0, 1.0], [20900.0, 6.0], [20700.0, 5.0], [21500.0, 3.0], [686200.0, 1.0], [22500.0, 4.0], [22300.0, 2.0], [21900.0, 5.0], [22100.0, 3.0], [21700.0, 3.0], [22700.0, 3.0], [23300.0, 21.0], [23100.0, 6.0], [23500.0, 39.0], [22900.0, 8.0], [24100.0, 14.0], [23700.0, 37.0], [23900.0, 27.0], [24500.0, 7.0], [24300.0, 3.0], [24700.0, 5.0], [25300.0, 2.0], [25100.0, 2.0], [25500.0, 3.0], [24900.0, 1.0], [807800.0, 1.0], [26100.0, 6.0], [25900.0, 1.0], [26500.0, 2.0], [25700.0, 2.0], [27300.0, 4.0], [26700.0, 3.0], [27700.0, 2.0], [28100.0, 2.0], [28500.0, 2.0], [27900.0, 3.0], [28300.0, 1.0], [29300.0, 2.0], [28900.0, 1.0], [29500.0, 2.0], [28700.0, 2.0], [30500.0, 2.0], [30700.0, 3.0], [30300.0, 3.0], [30100.0, 1.0], [29700.0, 1.0], [29900.0, 1.0], [31300.0, 1.0], [30900.0, 1.0], [31100.0, 1.0], [31500.0, 1.0], [31900.0, 1.0], [32300.0, 2.0], [34200.0, 1.0], [35800.0, 1.0], [48200.0, 2.0], [47400.0, 2.0], [47800.0, 4.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1325100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3045.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 35462.0, "series": [{"data": [[0.0, 5596.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 35462.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 17375.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3045.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.189781021897812, "minX": 1.60318704E12, "maxY": 132.05414410662232, "series": [{"data": [[1.60318752E12, 50.0], [1.60318722E12, 25.0], [1.60318854E12, 111.83112441214212], [1.60318824E12, 101.57180270624175], [1.60318794E12, 75.0], [1.60318884E12, 131.0], [1.60318764E12, 50.0], [1.60318734E12, 25.0], [1.60318704E12, 8.189781021897812], [1.60318866E12, 132.05414410662232], [1.60318908E12, 11.047619047619047], [1.60318836E12, 101.0], [1.60318806E12, 75.0], [1.60318776E12, 60.91289198606265], [1.60318746E12, 50.08556149732625], [1.60318716E12, 25.0], [1.60318878E12, 131.0], [1.60318896E12, 131.0], [1.60318848E12, 101.0468208092485], [1.60318818E12, 97.601466992665], [1.60318788E12, 75.0], [1.6031889E12, 131.0], [1.60318758E12, 50.0], [1.60318728E12, 25.0], [1.6031886E12, 126.81637426900579], [1.6031883E12, 101.0], [1.603188E12, 75.0], [1.6031877E12, 50.0], [1.6031874E12, 37.08349146110053], [1.6031871E12, 23.864483342744208], [1.60318872E12, 131.0], [1.60318902E12, 128.76446435237017], [1.60318842E12, 101.0], [1.60318812E12, 82.40570430733398], [1.60318782E12, 75.69544648137213]], "isOverall": false, "label": "Stress Testing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318908E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 309.0, "minX": 3.0, "maxY": 821075.0, "series": [{"data": [[3.0, 313.0], [4.0, 361.0], [6.0, 453.3333333333333], [8.0, 651.0], [9.0, 336.6666666666667], [11.0, 477.0], [12.0, 90048.55555555556], [13.0, 821075.0], [14.0, 312.0], [15.0, 223865.0], [16.0, 106296.5], [17.0, 218745.5], [18.0, 69590.88888888889], [19.0, 409.0], [20.0, 356.0], [21.0, 410.75000000000006], [23.0, 414.0], [24.0, 458.1666666666667], [26.0, 510.3333333333333], [27.0, 2907.3333333333335], [28.0, 359.0], [29.0, 7570.666666666667], [30.0, 2930.8], [31.0, 3951.6], [33.0, 957.4736842105262], [34.0, 309.0], [35.0, 6189.25], [36.0, 568.8260869565217], [37.0, 5347.333333333333], [38.0, 1934.7142857142856], [39.0, 392.5789473684211], [40.0, 335.0], [41.0, 350.6666666666667], [42.0, 1112.0], [43.0, 2010.0], [44.0, 891.0], [45.0, 1638.090909090909], [46.0, 5622.0], [47.0, 485.33333333333337], [48.0, 1774.6999999999998], [49.0, 4369.0], [50.0, 456.6666666666667], [51.0, 544.0625000000001], [52.0, 858.0], [53.0, 824.3333333333334], [54.0, 997.6470588235294], [55.0, 6134.0], [56.0, 474.0], [57.0, 635.2799999999997], [58.0, 4142.0], [59.0, 2035.4285714285713], [60.0, 559.1176470588235], [61.0, 4585.333333333334], [62.0, 3365.25], [63.0, 582.8260869565217], [64.0, 574.0], [65.0, 939.6], [66.0, 1978.1764705882351], [68.0, 2941.8], [69.0, 802.2222222222223], [70.0, 1632.8333333333335], [71.0, 3145.5], [72.0, 1729.8125], [74.0, 2796.8], [75.0, 1235.1761786600528], [76.0, 6983.333333333333], [77.0, 5997.333333333334], [78.0, 1116.142857142857], [79.0, 3234.1818181818185], [80.0, 1868.7142857142858], [81.0, 4547.0], [82.0, 1161.5], [83.0, 2086.5], [84.0, 2211.076923076923], [85.0, 5771.0], [86.0, 2144.1111111111113], [87.0, 934.7777777777778], [88.0, 3737.7999999999997], [89.0, 1807.6666666666667], [90.0, 2694.5], [91.0, 2573.0], [93.0, 1329.5384615384614], [92.0, 2422.8636363636365], [94.0, 2106.2758620689656], [95.0, 1562.4], [96.0, 1732.3333333333335], [97.0, 2000.5333333333333], [98.0, 1429.5555555555554], [99.0, 1301.6666666666672], [100.0, 1673.8709677419354], [101.0, 913.3333333333333], [102.0, 1818.3], [103.0, 6612.5], [104.0, 1336.3333333333335], [105.0, 1288.162162162162], [106.0, 1018.5789473684208], [107.0, 1600.2142857142858], [108.0, 1216.5555555555557], [109.0, 1222.952380952381], [110.0, 1042.0], [111.0, 1449.44], [112.0, 1669.6], [113.0, 1159.0000000000002], [114.0, 1711.5416666666667], [115.0, 1429.4814814814815], [116.0, 973.0333333333334], [117.0, 612.125], [118.0, 1299.6000000000001], [119.0, 1044.1666666666667], [120.0, 3301.8888888888887], [121.0, 1440.7777777777778], [122.0, 1166.5384615384617], [123.0, 1491.4857142857145], [124.0, 1182.6666666666667], [125.0, 4711.0], [126.0, 1015.1249999999998], [127.0, 1041.6666666666667], [128.0, 1404.842105263158], [129.0, 1293.6363636363635], [130.0, 1170.8000000000002], [131.0, 1036.4615384615386], [132.0, 1188.9999999999998], [133.0, 1366.6521739130435], [134.0, 1688.111111111111], [135.0, 1174.6285714285711], [136.0, 1600.4468085106382], [137.0, 1829.0526315789477], [138.0, 1002.1600000000001], [139.0, 824.8846153846155], [140.0, 1479.4999999999998], [141.0, 2065.7692307692305], [142.0, 1137.0588235294117], [143.0, 1267.0], [144.0, 1662.333333333333], [145.0, 1160.25], [146.0, 1963.0], [147.0, 1102.2439024390237], [148.0, 1563.5], [149.0, 1593.7727272727273], [150.0, 2214.546275049715], [151.0, 1566.4575163398686], [152.0, 2133.35], [153.0, 1837.5443037974683], [155.0, 1688.7333333333333], [156.0, 1479.0714285714287], [154.0, 1692.5555555555552], [157.0, 1247.5714285714284], [158.0, 1396.8750000000002], [159.0, 1804.6], [160.0, 1848.7307692307693], [161.0, 983.6470588235293], [162.0, 2505.625], [163.0, 1329.12], [164.0, 3591.125], [165.0, 2205.0], [166.0, 1618.65625], [167.0, 1937.4117647058827], [168.0, 1437.4444444444446], [169.0, 1234.423076923077], [170.0, 1570.3125], [171.0, 1325.3500000000001], [172.0, 1124.8636363636365], [173.0, 1339.7941176470586], [174.0, 1010.2], [175.0, 1622.5333333333335], [176.0, 1203.0], [177.0, 2528.363636363636], [178.0, 1684.142857142857], [179.0, 1074.388888888889], [180.0, 2290.714285714286], [181.0, 2193.4230769230767], [182.0, 1623.0444444444447], [183.0, 2876.3999999999996], [184.0, 2197.3750000000005], [185.0, 1214.5238095238096], [186.0, 2273.9499999999994], [187.0, 1299.75], [188.0, 2918.6999999999994], [189.0, 1789.5769230769229], [190.0, 2354.620689655173], [191.0, 965.7142857142857], [192.0, 1899.297297297297], [193.0, 1726.2592592592594], [194.0, 1449.1063829787236], [195.0, 1880.4318181818182], [196.0, 1738.75], [197.0, 2374.4374999999995], [198.0, 2853.2962962962965], [199.0, 3282.0], [200.0, 1120.0], [201.0, 1052.0], [202.0, 1740.027777777778], [203.0, 2386.5973006905247], [204.0, 2108.3435374149667], [205.0, 2999.328767123288], [206.0, 2234.1041666666665], [207.0, 3236.1641791044776], [208.0, 2827.1825396825398], [209.0, 2625.9374999999995], [210.0, 2462.8800000000006], [211.0, 2905.691860465117], [212.0, 2671.9553571428582], [213.0, 1760.2605042016805], [214.0, 1525.1609195402305], [215.0, 2905.113636363635], [216.0, 2242.8783783783783], [217.0, 2041.9534883720933], [218.0, 1409.378378378378], [219.0, 1521.1020408163263], [220.0, 2012.445255474453], [221.0, 2119.9531249999995], [222.0, 2459.7746478873237], [223.0, 2598.820512820513], [224.0, 1843.8200000000008], [225.0, 2402.9016393442616], [227.0, 2019.4239999999993], [228.0, 3109.442857142857], [229.0, 2660.330188679246], [230.0, 2531.914893617022], [231.0, 2733.353448275863], [226.0, 2228.2077922077924], [232.0, 2468.151515151517], [233.0, 2570.1982758620675], [234.0, 3496.3970588235293], [235.0, 2579.320312500002], [236.0, 2192.1527777777783], [237.0, 2563.93396226415], [238.0, 2854.627272727273], [239.0, 2420.3578947368424], [240.0, 2686.445652173913], [242.0, 2446.6911764705883], [241.0, 2850.530612244898], [243.0, 2733.976744186047], [244.0, 2509.157894736842], [245.0, 2335.197368421053], [246.0, 1764.1489361702131], [247.0, 2190.0449438202254], [248.0, 2345.7738095238105], [249.0, 3171.6594202898555], [250.0, 2399.095808383231], [251.0, 3443.7113402061846], [252.0, 2901.1328124999995], [253.0, 1571.358490566038], [254.0, 1884.0952380952376], [255.0, 2732.494764397903], [257.0, 2422.1717171717173], [256.0, 2731.800000000004], [258.0, 2617.0467836257276], [259.0, 2598.4115942028975], [260.0, 2978.1124694376526], [261.0, 2730.6767676767677], [262.0, 2562.9363636363632], [263.0, 2545.1583333333315], [264.0, 2423.601769911504], [270.0, 3629.1419354838717], [271.0, 2996.7626262626254], [268.0, 2779.829696969691], [269.0, 2705.4027303754247], [265.0, 2192.41592920354], [266.0, 2222.608695652173], [267.0, 2557.851612903225], [273.0, 2695.431372549019], [272.0, 2507.4765624999986], [274.0, 2712.94375], [275.0, 3202.302325581395], [276.0, 2875.5662593984976], [277.0, 3105.7594936708856], [278.0, 2530.3214285714294], [279.0, 2398.145205479451], [280.0, 2566.3139240506334], [286.0, 3260.8084577114428], [287.0, 2851.401913875596], [284.0, 2386.307042253521], [285.0, 2264.4806763284996], [281.0, 2531.7506361323153], [282.0, 2548.3458445040205], [283.0, 2745.833333333333], [289.0, 2794.101123595507], [288.0, 2476.6911764705906], [290.0, 2929.6089743589732], [291.0, 2798.7527472527454], [292.0, 2925.3080963800307], [293.0, 3308.5305466237946], [294.0, 3114.1605263157903], [295.0, 2610.7664092664127], [296.0, 3024.2181372549026], [302.0, 4785.959459459457], [303.0, 2771.2777777777787], [300.0, 2139.6575342465762], [301.0, 3153.1111111111113], [297.0, 3214.782051282051], [298.0, 2535.615894039735], [299.0, 3644.641666666665], [305.0, 3623.4634146341464], [304.0, 2609.055555555555], [306.0, 4757.11111111111], [307.0, 2631.80487804878], [308.0, 2997.6249999999995], [309.0, 2637.9041095890416], [310.0, 2986.1014492753625], [311.0, 2528.155555555555], [312.0, 1678.7413793103447], [318.0, 4753.384615384613], [319.0, 6392.694444444446], [316.0, 3148.35294117647], [317.0, 2771.5869565217395], [313.0, 3803.416666666666], [314.0, 2368.5166666666664], [315.0, 3354.2647058823522], [321.0, 3311.5405405405404], [320.0, 4009.7912087912096], [322.0, 2483.66101694915], [323.0, 2758.633333333334], [324.0, 3149.3], [325.0, 4669.0952380952385], [326.0, 5849.935483870968], [327.0, 7695.900000000001], [328.0, 5197.565217391303], [334.0, 3026.2499999999995], [332.0, 3579.1352440662854], [333.0, 6977.338983050846], [329.0, 3841.171428571429], [330.0, 5266.1132075471705], [331.0, 3948.0444444444415]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[231.31674745437252, 2624.1181560883706]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 334.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.60318704E12, "maxY": 147884.36666666667, "series": [{"data": [[1.60318752E12, 67013.13333333333], [1.60318722E12, 57996.4], [1.60318854E12, 122302.43333333333], [1.60318824E12, 120034.58333333333], [1.60318794E12, 85408.96666666666], [1.60318884E12, 138644.56666666668], [1.60318764E12, 69738.03333333334], [1.60318734E12, 37713.8], [1.60318704E12, 7370.6], [1.60318866E12, 125895.61666666667], [1.60318908E12, 994.4666666666667], [1.60318836E12, 88566.11666666667], [1.60318806E12, 100872.38333333333], [1.60318776E12, 106919.81666666667], [1.60318746E12, 80050.16666666667], [1.60318716E12, 96767.5], [1.60318878E12, 140738.35], [1.60318896E12, 135143.26666666666], [1.60318848E12, 89836.48333333334], [1.60318818E12, 108823.03333333334], [1.60318788E12, 77632.83333333333], [1.6031889E12, 147884.36666666667], [1.60318758E12, 44815.53333333333], [1.60318728E12, 41856.53333333333], [1.6031886E12, 134224.4], [1.6031883E12, 115322.3], [1.603188E12, 101164.45], [1.6031877E12, 105374.03333333334], [1.6031874E12, 84989.08333333333], [1.6031871E12, 95256.75], [1.60318872E12, 135004.68333333332], [1.60318902E12, 141218.13333333333], [1.60318842E12, 69348.21666666666], [1.60318812E12, 92334.5], [1.60318782E12, 88756.53333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60318752E12, 2299.55], [1.60318722E12, 1994.3], [1.60318854E12, 3947.9], [1.60318824E12, 3899.8], [1.60318794E12, 2762.05], [1.60318884E12, 4482.55], [1.60318764E12, 2392.05], [1.60318734E12, 1296.85], [1.60318704E12, 253.45], [1.60318866E12, 4103.3], [1.60318908E12, 0.0], [1.60318836E12, 2795.35], [1.60318806E12, 3379.95], [1.60318776E12, 3592.7], [1.60318746E12, 2725.05], [1.60318716E12, 3326.3], [1.60318878E12, 4543.6], [1.60318896E12, 4599.1], [1.60318848E12, 2847.15], [1.60318818E12, 3659.3], [1.60318788E12, 2540.05], [1.6031889E12, 4896.95], [1.60318758E12, 1541.05], [1.60318728E12, 1439.3], [1.6031886E12, 4303.1], [1.6031883E12, 3766.6], [1.603188E12, 3418.8], [1.6031877E12, 3598.25], [1.6031874E12, 2913.75], [1.6031871E12, 3276.35], [1.60318872E12, 4517.7], [1.60318902E12, 4637.95], [1.60318842E12, 2282.9], [1.60318812E12, 3169.05], [1.60318782E12, 2904.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318908E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 541.6423357664233, "minX": 1.60318704E12, "maxY": 266040.0476190476, "series": [{"data": [[1.60318752E12, 2512.9550922213293], [1.60318722E12, 1274.7782931354352], [1.60318854E12, 2703.5027789653673], [1.60318824E12, 2653.7926669576545], [1.60318794E12, 2685.208717004296], [1.60318884E12, 2811.7555807794147], [1.60318764E12, 2551.333590138678], [1.60318734E12, 2032.9671897289593], [1.60318704E12, 541.6423357664233], [1.60318866E12, 3232.3302790503935], [1.60318908E12, 266040.0476190476], [1.60318836E12, 3357.1728395061714], [1.60318806E12, 2325.978925184406], [1.60318776E12, 1742.398705823794], [1.60318746E12, 1787.243983957217], [1.60318716E12, 814.8387993329627], [1.60318878E12, 2789.9542410714266], [1.60318896E12, 2960.593032462396], [1.60318848E12, 3381.360693641615], [1.60318818E12, 2685.097310513447], [1.60318788E12, 3028.786729857818], [1.6031889E12, 2696.536785714291], [1.60318758E12, 3391.021608643457], [1.60318728E12, 2103.38560411311], [1.6031886E12, 2775.6413255360626], [1.6031883E12, 2601.1139471285314], [1.603188E12, 2403.710817941956], [1.6031877E12, 1544.2095625635855], [1.6031874E12, 1332.2707147375081], [1.6031871E12, 789.0463015245622], [1.60318872E12, 2895.552931916566], [1.60318902E12, 2796.980963045916], [1.60318842E12, 4450.098323170728], [1.60318812E12, 2824.6169965075646], [1.60318782E12, 2612.7297457125965]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60318704E12, "maxY": 3571.038109756094, "series": [{"data": [[1.60318752E12, 2469.1868484362526], [1.60318722E12, 1273.924860853431], [1.60318854E12, 1414.9790508764436], [1.60318824E12, 1425.2514185944997], [1.60318794E12, 1471.7102516881519], [1.60318884E12, 1530.398789254635], [1.60318764E12, 2498.515408320497], [1.60318734E12, 2031.9358059914407], [1.60318704E12, 540.9781021897812], [1.60318866E12, 2133.6413994169097], [1.60318908E12, 0.0], [1.60318836E12, 1577.9182833627312], [1.60318806E12, 1841.8814541622794], [1.60318776E12, 1319.548531607762], [1.60318746E12, 1583.1671122994637], [1.60318716E12, 808.1328515842142], [1.60318878E12, 1549.3694196428548], [1.60318896E12, 2754.5601741884393], [1.60318848E12, 1611.2965317919075], [1.60318818E12, 2222.057701711488], [1.60318788E12, 2077.0893703452925], [1.6031889E12, 1891.4500000000014], [1.60318758E12, 3390.0960384153636], [1.60318728E12, 2102.4061696658127], [1.6031886E12, 1430.630409356726], [1.6031883E12, 1521.9498632634447], [1.603188E12, 2039.317678100264], [1.6031877E12, 1421.6266531027468], [1.6031874E12, 1286.0044275774812], [1.6031871E12, 788.4251835121394], [1.60318872E12, 2335.9279811098027], [1.60318902E12, 1886.4964539007071], [1.60318842E12, 3571.038109756094], [1.60318812E12, 2784.638533178116], [1.60318782E12, 1611.21052631579]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 72.65693430656934, "minX": 1.60318704E12, "maxY": 266038.7142857143, "series": [{"data": [[1.60318752E12, 251.4153969526869], [1.60318722E12, 120.4842300556587], [1.60318854E12, 2321.1316802052183], [1.60318824E12, 2110.0667830641664], [1.60318794E12, 2306.003683241252], [1.60318884E12, 2322.0726447219035], [1.60318764E12, 361.35593220338967], [1.60318734E12, 82.18544935806001], [1.60318704E12, 72.65693430656934], [1.60318866E12, 1813.092461474385], [1.60318908E12, 266038.7142857143], [1.60318836E12, 2853.783068783064], [1.60318806E12, 1087.5684931506853], [1.60318776E12, 1296.2623195619685], [1.60318746E12, 595.8048128342236], [1.60318716E12, 332.8871595330731], [1.60318878E12, 2199.1168154761895], [1.60318896E12, 730.4564528899449], [1.60318848E12, 2672.430057803464], [1.60318818E12, 1163.6454767726145], [1.60318788E12, 1706.2992552471237], [1.6031889E12, 1532.4907142857166], [1.60318758E12, 76.7346938775511], [1.60318728E12, 97.1195372750644], [1.6031886E12, 2361.143469785573], [1.6031883E12, 2008.9143117593421], [1.603188E12, 816.8596306068605], [1.6031877E12, 626.4114954221767], [1.6031874E12, 425.30107526881744], [1.6031871E12, 253.72501411631865], [1.60318872E12, 1274.9567099567098], [1.60318902E12, 1770.1048898842846], [1.60318842E12, 1893.08612804878], [1.60318812E12, 435.3527357392315], [1.60318782E12, 1910.9154346540508]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 277.0, "minX": 1.60318704E12, "maxY": 39183.0, "series": [{"data": [[1.60318752E12, 29349.0], [1.60318722E12, 13923.0], [1.60318854E12, 19152.0], [1.60318824E12, 25655.0], [1.60318794E12, 10662.0], [1.60318884E12, 30761.0], [1.60318764E12, 31060.0], [1.60318734E12, 18658.0], [1.60318704E12, 4631.0], [1.60318866E12, 21482.0], [1.60318836E12, 15027.0], [1.60318806E12, 17412.0], [1.60318776E12, 22434.0], [1.60318746E12, 25481.0], [1.60318716E12, 7617.0], [1.60318878E12, 26728.0], [1.60318896E12, 25730.0], [1.60318848E12, 27022.0], [1.60318818E12, 29081.0], [1.60318788E12, 39183.0], [1.6031889E12, 27828.0], [1.60318758E12, 34403.0], [1.60318728E12, 23244.0], [1.6031886E12, 13263.0], [1.6031883E12, 26551.0], [1.603188E12, 18382.0], [1.6031877E12, 16467.0], [1.6031874E12, 14201.0], [1.6031871E12, 8300.0], [1.60318872E12, 26203.0], [1.60318902E12, 32098.0], [1.60318842E12, 37509.0], [1.60318812E12, 25362.0], [1.60318782E12, 17505.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60318752E12, 296.19599970340727], [1.60318722E12, 297.0], [1.60318854E12, 499.14999490976334], [1.60318824E12, 489.9809994971752], [1.60318794E12, 555.4599964380265], [1.60318884E12, 445.26399768829344], [1.60318764E12, 293.0], [1.60318734E12, 287.0], [1.60318704E12, 285.48399993419645], [1.60318866E12, 422.809997355938], [1.60318836E12, 550.2559974765777], [1.60318806E12, 320.9039991283417], [1.60318776E12, 459.4869995367527], [1.60318746E12, 301.0], [1.60318716E12, 329.190999571085], [1.60318878E12, 569.2259988284111], [1.60318896E12, 344.382999407053], [1.60318848E12, 616.8599996328354], [1.60318818E12, 309.0], [1.60318788E12, 314.73199934482574], [1.6031889E12, 480.8319993686676], [1.60318758E12, 290.0119996023178], [1.60318728E12, 287.0], [1.6031886E12, 619.7719977807999], [1.6031883E12, 534.6659990286827], [1.603188E12, 385.5639982366562], [1.6031877E12, 366.0559981441498], [1.6031874E12, 290.17499962449074], [1.6031871E12, 312.0], [1.60318872E12, 501.9869994175434], [1.60318902E12, 452.0], [1.60318842E12, 341.2299994111061], [1.60318812E12, 298.0], [1.60318782E12, 542.2509966289997]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60318752E12, 297.31560011863706], [1.60318722E12, 297.0], [1.60318854E12, 513.5460008144379], [1.60318824E12, 494.51640080451966], [1.60318794E12, 564.1624005699158], [1.60318884E12, 448.9976002311707], [1.60318764E12, 293.0], [1.60318734E12, 287.0], [1.60318704E12, 285.7324000263214], [1.60318866E12, 426.0], [1.60318836E12, 562.6880014419555], [1.60318806E12, 324.19440034866335], [1.60318776E12, 477.47140037059785], [1.60318746E12, 301.5926001405716], [1.60318716E12, 331.620200343132], [1.60318878E12, 573.2972009372711], [1.60318896E12, 347.8639007115364], [1.60318848E12, 621.2460001468659], [1.60318818E12, 309.0], [1.60318788E12, 316.0], [1.6031889E12, 482.4304005050659], [1.60318758E12, 291.25660007953644], [1.60318728E12, 287.0], [1.6031886E12, 623.0], [1.6031883E12, 537.6630019426347], [1.603188E12, 387.0], [1.6031877E12, 368.53080037117], [1.6031874E12, 291.0], [1.6031871E12, 313.0], [1.60318872E12, 509.0], [1.60318902E12, 455.4876007175445], [1.60318842E12, 343.0], [1.60318812E12, 298.96860016345977], [1.60318782E12, 552.2116005992889]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60318752E12, 296.81799985170363], [1.60318722E12, 297.0], [1.60318854E12, 508.694998472929], [1.60318824E12, 491.14199899435044], [1.60318794E12, 561.7719992876052], [1.60318884E12, 448.02799971103667], [1.60318764E12, 293.0], [1.60318734E12, 287.0], [1.60318704E12, 285.62199996709825], [1.60318866E12, 426.0], [1.60318836E12, 556.6399981975555], [1.60318806E12, 322.73199956417085], [1.60318776E12, 467.7944960623979], [1.60318746E12, 301.0029998242855], [1.60318716E12, 330.18099957108495], [1.60318878E12, 571.3414997071028], [1.60318896E12, 345.6264997035265], [1.60318848E12, 619.5199992656708], [1.60318818E12, 309.0], [1.60318788E12, 316.0], [1.6031889E12, 481.1559996843338], [1.60318758E12, 290.8459998011589], [1.60318728E12, 287.0], [1.6031886E12, 621.2129994452], [1.6031883E12, 536.0], [1.603188E12, 387.0], [1.6031877E12, 368.0], [1.6031874E12, 290.96249981224537], [1.6031871E12, 312.82449978888036], [1.60318872E12, 508.2084997087717], [1.60318902E12, 452.8259997010231], [1.60318842E12, 342.46499970555305], [1.60318812E12, 298.28299979567527], [1.60318782E12, 549.3204983144999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60318752E12, 285.0], [1.60318722E12, 282.0], [1.60318854E12, 390.0], [1.60318824E12, 397.0], [1.60318794E12, 356.0], [1.60318884E12, 310.0], [1.60318764E12, 281.0], [1.60318734E12, 284.0], [1.60318704E12, 285.0], [1.60318866E12, 340.0], [1.60318836E12, 321.0], [1.60318806E12, 288.0], [1.60318776E12, 325.0], [1.60318746E12, 281.0], [1.60318716E12, 285.0], [1.60318878E12, 401.0], [1.60318896E12, 298.0], [1.60318848E12, 376.0], [1.60318818E12, 293.0], [1.60318788E12, 295.0], [1.6031889E12, 350.0], [1.60318758E12, 280.0], [1.60318728E12, 280.0], [1.6031886E12, 459.0], [1.6031883E12, 374.0], [1.603188E12, 316.0], [1.6031877E12, 299.0], [1.6031874E12, 277.0], [1.6031871E12, 290.0], [1.60318872E12, 410.0], [1.60318902E12, 318.0], [1.60318842E12, 307.0], [1.60318812E12, 279.0], [1.60318782E12, 470.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60318752E12, 659.0], [1.60318722E12, 498.0], [1.60318854E12, 1087.0], [1.60318824E12, 1047.5], [1.60318794E12, 1050.0], [1.60318884E12, 1105.0], [1.60318764E12, 738.0], [1.60318734E12, 399.0], [1.60318704E12, 386.0], [1.60318866E12, 1129.0], [1.60318836E12, 1071.0], [1.60318806E12, 1074.0], [1.60318776E12, 955.0], [1.60318746E12, 834.0], [1.60318716E12, 669.5], [1.60318878E12, 1135.0], [1.60318896E12, 1082.5], [1.60318848E12, 1172.0], [1.60318818E12, 1040.0], [1.60318788E12, 954.0], [1.6031889E12, 1077.0], [1.60318758E12, 522.0], [1.60318728E12, 457.0], [1.6031886E12, 1104.0], [1.6031883E12, 1086.5], [1.603188E12, 992.0], [1.6031877E12, 841.0], [1.6031874E12, 821.5], [1.6031871E12, 627.0], [1.60318872E12, 1099.0], [1.60318902E12, 1096.0], [1.60318842E12, 1395.5], [1.60318812E12, 898.0], [1.60318782E12, 1161.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318902E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 344.5, "minX": 1.0, "maxY": 47760.0, "series": [{"data": [[2.0, 344.5], [3.0, 380.0], [4.0, 4325.5], [5.0, 351.0], [6.0, 425.0], [7.0, 349.0], [8.0, 380.0], [9.0, 394.0], [10.0, 429.0], [11.0, 420.0], [12.0, 438.0], [13.0, 607.0], [14.0, 477.0], [15.0, 553.0], [16.0, 931.5], [17.0, 776.0], [18.0, 591.0], [19.0, 601.0], [20.0, 960.0], [21.0, 847.0], [22.0, 744.0], [23.0, 984.5], [24.0, 856.0], [25.0, 965.0], [26.0, 929.0], [27.0, 968.0], [28.0, 947.0], [29.0, 992.5], [30.0, 1003.0], [31.0, 999.0], [32.0, 1023.5], [33.0, 966.0], [35.0, 993.0], [34.0, 981.5], [37.0, 1000.0], [36.0, 1010.5], [39.0, 936.0], [38.0, 1017.0], [40.0, 1012.5], [41.0, 994.0], [43.0, 1062.0], [42.0, 1070.5], [45.0, 1024.0], [44.0, 1015.0], [46.0, 1072.5], [47.0, 1119.0], [48.0, 1063.0], [49.0, 1065.5], [50.0, 1073.0], [51.0, 1094.0], [53.0, 982.5], [52.0, 1030.0], [55.0, 1080.0], [54.0, 1088.5], [56.0, 983.0], [57.0, 922.0], [59.0, 1101.0], [58.0, 1108.0], [60.0, 946.0], [61.0, 1129.0], [63.0, 899.0], [64.0, 1266.5], [66.0, 1084.0], [72.0, 1234.0], [1.0, 7335.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 35623.0], [6.0, 47299.0], [7.0, 47760.0], [8.0, 11344.0], [10.0, 11295.0], [11.0, 18459.0], [12.0, 23569.0], [13.0, 10772.0], [14.0, 11050.0], [15.0, 11304.0], [16.0, 11396.0], [17.0, 11660.5], [18.0, 12714.5], [19.0, 11337.5], [20.0, 11491.0], [21.0, 11254.5], [22.0, 11457.0], [23.0, 11454.0], [24.0, 11971.5], [25.0, 11687.0], [26.0, 11421.5], [27.0, 11812.0], [28.0, 11696.5], [29.0, 11440.0], [30.0, 11577.5], [31.0, 11525.5], [33.0, 11779.0], [32.0, 11677.5], [34.0, 11447.0], [35.0, 11584.0], [37.0, 11533.5], [36.0, 11731.5], [39.0, 11516.0], [38.0, 11621.0], [40.0, 11484.0], [41.0, 11567.5], [42.0, 11528.0], [43.0, 11513.0], [45.0, 11655.0], [44.0, 11637.0], [47.0, 11459.0], [46.0, 11445.0], [49.0, 11668.0], [48.0, 11542.0], [51.0, 12263.5], [50.0, 11449.0], [53.0, 11443.0], [52.0, 11360.0], [54.0, 11411.5], [55.0, 11608.0], [57.0, 11602.5], [56.0, 11513.0], [59.0, 11281.0], [58.0, 11974.5], [60.0, 12678.5], [61.0, 11327.0], [64.0, 11398.5], [66.0, 23730.0], [72.0, 11097.5], [1.0, 21819.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 7334.0, "series": [{"data": [[2.0, 344.5], [3.0, 377.0], [4.0, 4324.5], [5.0, 347.0], [6.0, 425.0], [7.0, 347.0], [8.0, 377.0], [9.0, 392.5], [10.0, 429.0], [11.0, 419.0], [12.0, 437.0], [13.0, 607.0], [14.0, 476.0], [15.0, 553.0], [16.0, 931.5], [17.0, 776.0], [18.0, 590.5], [19.0, 601.0], [20.0, 960.0], [21.0, 847.0], [22.0, 744.0], [23.0, 984.0], [24.0, 856.0], [25.0, 963.5], [26.0, 928.5], [27.0, 967.0], [28.0, 946.0], [29.0, 992.0], [30.0, 1001.0], [31.0, 997.0], [32.0, 1022.5], [33.0, 966.0], [35.0, 993.0], [34.0, 981.0], [37.0, 999.5], [36.0, 1010.0], [39.0, 935.0], [38.0, 1015.5], [40.0, 1012.0], [41.0, 994.0], [43.0, 1062.0], [42.0, 1070.0], [45.0, 1024.0], [44.0, 1014.0], [46.0, 1072.0], [47.0, 1119.0], [48.0, 1063.0], [49.0, 1065.0], [50.0, 1072.0], [51.0, 1094.0], [53.0, 982.5], [52.0, 1030.0], [55.0, 1080.0], [54.0, 1088.0], [56.0, 981.0], [57.0, 922.0], [59.0, 1101.0], [58.0, 1107.5], [60.0, 944.5], [61.0, 1129.0], [63.0, 899.0], [64.0, 1266.0], [66.0, 1084.0], [72.0, 1234.0], [1.0, 7334.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [33.0, 0.0], [32.0, 0.0], [34.0, 0.0], [35.0, 0.0], [37.0, 0.0], [36.0, 0.0], [39.0, 0.0], [38.0, 0.0], [40.0, 0.0], [41.0, 0.0], [42.0, 0.0], [43.0, 0.0], [45.0, 0.0], [44.0, 0.0], [47.0, 0.0], [46.0, 0.0], [49.0, 0.0], [48.0, 0.0], [51.0, 0.0], [50.0, 0.0], [53.0, 0.0], [52.0, 0.0], [54.0, 0.0], [55.0, 0.0], [57.0, 0.0], [56.0, 0.0], [59.0, 0.0], [58.0, 0.0], [60.0, 0.0], [61.0, 0.0], [64.0, 0.0], [66.0, 0.0], [72.0, 0.0], [1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.4833333333333334, "minX": 1.60318704E12, "maxY": 46.666666666666664, "series": [{"data": [[1.60318752E12, 20.783333333333335], [1.60318722E12, 17.966666666666665], [1.60318854E12, 39.266666666666666], [1.60318824E12, 38.15], [1.60318794E12, 27.15], [1.60318884E12, 44.05], [1.60318764E12, 21.633333333333333], [1.60318734E12, 11.683333333333334], [1.60318704E12, 2.4833333333333334], [1.60318866E12, 39.93333333333333], [1.60318836E12, 28.35], [1.60318806E12, 31.633333333333333], [1.60318776E12, 33.81666666666667], [1.60318746E12, 24.933333333333334], [1.60318716E12, 29.983333333333334], [1.60318878E12, 44.8], [1.60318896E12, 42.1], [1.60318848E12, 28.866666666666667], [1.60318818E12, 34.35], [1.60318788E12, 24.616666666666667], [1.6031889E12, 46.666666666666664], [1.60318758E12, 13.883333333333333], [1.60318728E12, 12.966666666666667], [1.6031886E12, 43.016666666666666], [1.6031883E12, 36.56666666666667], [1.603188E12, 31.583333333333332], [1.6031877E12, 32.766666666666666], [1.6031874E12, 26.766666666666666], [1.6031871E12, 29.733333333333334], [1.60318872E12, 42.35], [1.60318902E12, 42.81666666666667], [1.60318842E12, 21.866666666666667], [1.60318812E12, 28.833333333333332], [1.60318782E12, 28.266666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318902E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60318704E12, "maxY": 44.11666666666667, "series": [{"data": [[1.60318848E12, 0.18333333333333332], [1.60318818E12, 0.03333333333333333], [1.60318788E12, 0.06666666666666667], [1.6031889E12, 0.06666666666666667], [1.60318854E12, 0.16666666666666666], [1.60318824E12, 0.11666666666666667], [1.60318794E12, 0.16666666666666666], [1.60318884E12, 0.3], [1.6031886E12, 0.36666666666666664], [1.6031883E12, 0.13333333333333333], [1.603188E12, 0.05], [1.60318866E12, 0.1], [1.60318908E12, 0.11666666666666667], [1.60318836E12, 0.31666666666666665], [1.6031874E12, 0.03333333333333333], [1.60318806E12, 0.05], [1.60318872E12, 0.08333333333333333], [1.60318776E12, 0.05], [1.60318902E12, 0.16666666666666666], [1.60318842E12, 0.11666666666666667], [1.60318782E12, 0.03333333333333333], [1.60318878E12, 0.25]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.60318752E12, 20.716666666666665], [1.60318722E12, 17.966666666666665], [1.60318854E12, 35.56666666666667], [1.60318824E12, 35.13333333333333], [1.60318794E12, 24.883333333333333], [1.60318884E12, 40.38333333333333], [1.60318764E12, 21.55], [1.60318734E12, 11.683333333333334], [1.60318704E12, 2.283333333333333], [1.60318866E12, 36.95], [1.60318836E12, 25.183333333333334], [1.60318806E12, 30.45], [1.60318776E12, 32.36666666666667], [1.60318746E12, 24.55], [1.60318716E12, 29.966666666666665], [1.60318878E12, 40.93333333333333], [1.60318896E12, 41.43333333333333], [1.60318848E12, 25.65], [1.60318818E12, 32.96666666666667], [1.60318788E12, 22.883333333333333], [1.6031889E12, 44.11666666666667], [1.60318758E12, 13.883333333333333], [1.60318728E12, 12.966666666666667], [1.6031886E12, 38.766666666666666], [1.6031883E12, 33.93333333333333], [1.603188E12, 30.8], [1.6031877E12, 32.416666666666664], [1.6031874E12, 26.233333333333334], [1.6031871E12, 29.5], [1.60318872E12, 40.7], [1.60318902E12, 41.78333333333333], [1.60318842E12, 20.566666666666666], [1.60318812E12, 28.55], [1.60318782E12, 26.166666666666668]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.60318866E12, 0.016666666666666666], [1.6031874E12, 0.016666666666666666], [1.6031871E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.60318752E12, 0.06666666666666667], [1.60318854E12, 3.25], [1.60318824E12, 2.933333333333333], [1.60318794E12, 2.1], [1.60318884E12, 3.3666666666666667], [1.60318764E12, 0.08333333333333333], [1.60318866E12, 2.95], [1.60318908E12, 0.23333333333333334], [1.60318836E12, 2.85], [1.60318806E12, 1.1333333333333333], [1.60318776E12, 1.0666666666666667], [1.60318746E12, 0.38333333333333336], [1.60318716E12, 0.016666666666666666], [1.60318878E12, 3.6166666666666667], [1.60318896E12, 0.6666666666666666], [1.60318848E12, 3.0], [1.60318818E12, 1.0833333333333333], [1.60318788E12, 1.6666666666666667], [1.6031889E12, 2.4833333333333334], [1.6031886E12, 3.6166666666666667], [1.6031883E12, 2.5], [1.603188E12, 0.7333333333333333], [1.6031877E12, 0.35], [1.6031874E12, 0.06666666666666667], [1.60318872E12, 1.5666666666666667], [1.60318902E12, 2.7], [1.60318842E12, 1.1833333333333333], [1.60318812E12, 0.08333333333333333], [1.60318782E12, 1.9833333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60318908E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60318704E12, "maxY": 44.11666666666667, "series": [{"data": [[1.60318752E12, 20.716666666666665], [1.60318722E12, 17.966666666666665], [1.60318854E12, 35.56666666666667], [1.60318824E12, 35.13333333333333], [1.60318794E12, 24.883333333333333], [1.60318884E12, 40.38333333333333], [1.60318764E12, 21.55], [1.60318734E12, 11.683333333333334], [1.60318704E12, 2.283333333333333], [1.60318866E12, 36.95], [1.60318836E12, 25.183333333333334], [1.60318806E12, 30.45], [1.60318776E12, 32.36666666666667], [1.60318746E12, 24.55], [1.60318716E12, 29.966666666666665], [1.60318878E12, 40.93333333333333], [1.60318896E12, 41.43333333333333], [1.60318848E12, 25.65], [1.60318818E12, 32.96666666666667], [1.60318788E12, 22.883333333333333], [1.6031889E12, 44.11666666666667], [1.60318758E12, 13.883333333333333], [1.60318728E12, 12.966666666666667], [1.6031886E12, 38.766666666666666], [1.6031883E12, 33.93333333333333], [1.603188E12, 30.8], [1.6031877E12, 32.416666666666664], [1.6031874E12, 26.233333333333334], [1.6031871E12, 29.5], [1.60318872E12, 40.7], [1.60318902E12, 41.78333333333333], [1.60318842E12, 20.566666666666666], [1.60318812E12, 28.55], [1.60318782E12, 26.166666666666668]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.60318752E12, 0.06666666666666667], [1.60318854E12, 3.4166666666666665], [1.60318824E12, 3.05], [1.60318794E12, 2.2666666666666666], [1.60318884E12, 3.6666666666666665], [1.60318764E12, 0.08333333333333333], [1.60318866E12, 3.066666666666667], [1.60318908E12, 0.35], [1.60318836E12, 3.1666666666666665], [1.60318806E12, 1.1833333333333333], [1.60318776E12, 1.1166666666666667], [1.60318746E12, 0.38333333333333336], [1.60318716E12, 0.016666666666666666], [1.60318878E12, 3.8666666666666667], [1.60318896E12, 0.6666666666666666], [1.60318848E12, 3.183333333333333], [1.60318818E12, 1.1166666666666667], [1.60318788E12, 1.7333333333333334], [1.6031889E12, 2.55], [1.6031886E12, 3.9833333333333334], [1.6031883E12, 2.6333333333333333], [1.603188E12, 0.7833333333333333], [1.6031877E12, 0.35], [1.6031874E12, 0.11666666666666667], [1.6031871E12, 0.016666666666666666], [1.60318872E12, 1.65], [1.60318902E12, 2.8666666666666667], [1.60318842E12, 1.3], [1.60318812E12, 0.08333333333333333], [1.60318782E12, 2.0166666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.60318704E12, "maxY": 44.11666666666667, "series": [{"data": [[1.60318752E12, 20.716666666666665], [1.60318722E12, 17.966666666666665], [1.60318854E12, 35.56666666666667], [1.60318824E12, 35.13333333333333], [1.60318794E12, 24.883333333333333], [1.60318884E12, 40.38333333333333], [1.60318764E12, 21.55], [1.60318734E12, 11.683333333333334], [1.60318704E12, 2.283333333333333], [1.60318866E12, 36.95], [1.60318836E12, 25.183333333333334], [1.60318806E12, 30.45], [1.60318776E12, 32.36666666666667], [1.60318746E12, 24.55], [1.60318716E12, 29.966666666666665], [1.60318878E12, 40.93333333333333], [1.60318896E12, 41.43333333333333], [1.60318848E12, 25.65], [1.60318818E12, 32.96666666666667], [1.60318788E12, 22.883333333333333], [1.6031889E12, 44.11666666666667], [1.60318758E12, 13.883333333333333], [1.60318728E12, 12.966666666666667], [1.6031886E12, 38.766666666666666], [1.6031883E12, 33.93333333333333], [1.603188E12, 30.8], [1.6031877E12, 32.416666666666664], [1.6031874E12, 26.233333333333334], [1.6031871E12, 29.5], [1.60318872E12, 40.7], [1.60318902E12, 41.78333333333333], [1.60318842E12, 20.566666666666666], [1.60318812E12, 28.55], [1.60318782E12, 26.166666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.60318752E12, 0.06666666666666667], [1.60318854E12, 3.4166666666666665], [1.60318824E12, 3.05], [1.60318794E12, 2.2666666666666666], [1.60318884E12, 3.6666666666666665], [1.60318764E12, 0.08333333333333333], [1.60318866E12, 3.066666666666667], [1.60318908E12, 0.35], [1.60318836E12, 3.1666666666666665], [1.60318806E12, 1.1833333333333333], [1.60318776E12, 1.1166666666666667], [1.60318746E12, 0.38333333333333336], [1.60318716E12, 0.016666666666666666], [1.60318878E12, 3.8666666666666667], [1.60318896E12, 0.6666666666666666], [1.60318848E12, 3.183333333333333], [1.60318818E12, 1.1166666666666667], [1.60318788E12, 1.7333333333333334], [1.6031889E12, 2.55], [1.6031886E12, 3.9833333333333334], [1.6031883E12, 2.6333333333333333], [1.603188E12, 0.7833333333333333], [1.6031877E12, 0.35], [1.6031874E12, 0.11666666666666667], [1.6031871E12, 0.016666666666666666], [1.60318872E12, 1.65], [1.60318902E12, 2.8666666666666667], [1.60318842E12, 1.3], [1.60318812E12, 0.08333333333333333], [1.60318782E12, 2.0166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60318908E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

